%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Emoji-05.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: Drekhann
%%CreationDate: 2/2/2017
%%BoundingBox: 0 0 489 391
%%HiResBoundingBox: 0 0 488.0907 390.0237
%%CropBox: 0 0 488.0907 390.0237
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">001</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2017-02-02T20:15+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-02-02T20:15+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-02-02T20:14:59+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>208</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgECWAJYAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABACWAAAAAEA&#xA;AQJYAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9TzNIsTtEvOQKSiE0BYD&#xA;YV7VxV8eXPm7yjJ+WN55wv8AzRf2/wCcsNxI7ot3cpNDcLdFVtls6+gLYRAVqlO1f2cVeI695/8A&#xA;OGu+ZpPM1/qlwdYaQyRXMcjxmHeqpBxP7tV/ZC4q/Q78s9Z1PW/y98uavqoI1G+062nuWI48neME&#xA;vQdOf2vpxVkuKvnf8wj5I1T87NU0n81b+S28vWmmWtx5Ws5Lie2tZGav1iasBSsyygqvxVNO9Bir&#xA;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&#xA;IG3fartzDlwyiYniI8qt6Nmc8s+Tv+csfzd89aT5uj8paJqE2j6ZHaRXE8tqxhnuHmLf7uWjhFC8&#xA;eKkVNa12oq+eLPz152srpLq01/UYLiM8llS7mDA/Plir9C/yl1/VPMH5a+XNZ1V/U1G9so5LqXiF&#xA;5uBxLkDYFqcjTbwxVW8zeRoNe1CO7lvJIQiCP0lUMKAk1FTsTXMfLp+M3bt9B2sdNAxEQbN2mehe&#xA;W9J0SEx2MVHfaSdzykani233DbLMeKMOTiavXZdQbmfh0TTLHDdirsVdirsVdirzS8/JOyvfO+r6&#xA;7d6ktzoWvFX1jy9PZW8omeOAQR0unBljRePPilDyoeQpiqZ+UvyZ8g+V7yS9sbOS6u2h+qxTahM9&#xA;40Ftv+4g9Yt6cfxGoHXvirfl38l/y38va9+ndL0hYr9Of1QvJLLFbeoxZxbQuzRw1J/YUU6CgxVA&#xA;6J+WHmJPPtr5s8z+Zjrr6RDc22iW62kdoY0uz8TTtE3GRgnwbIvY9cVei4q7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq+eP8AnJzyRoknmPy/501q0a50SKJ9K1aRS4WAs5ktJpPTo3p85JEY&#xA;9ASuV5eLh9PNzdAcPijxh6HleveRvy4n0/6loNpb3Ou6u6W2jxW9xJIzXExCIyqrv8CV5saUpmJi&#xA;nkMgDyd/2hptFjwmUQOI8qPX5vsny1odvoPl3S9DtjW30u0gs4mpSqwRiMMfc8a5nvJplirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqld2lreW0trd&#xA;wx3FrOpSaCVQ8bowoVZWBDA+BxVjPlr8qfy68sapJqug6BaWGoyAg3MaEuoYUYR8i3pgjqEpirK8&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;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&#xA;WLiTUtHuZEFJ7Wahkt1LVqbaTkpT+Uq1N8wdWJWD0ep9n8mIxlAgcf3j9iD1nSrW509PJehWMEmp&#xA;awDa2GnIi8Iw/wBu5kVQeEcK1dnp28cpwRlKdux7UzYsGAwAHqFCP6fg+m/K/l+y8u+XNM0Gy/3l&#xA;0y2itYmIoWESBeR92IqffNo8KmeKuxV2KuxV2KuxV2KuxVTubW2u7eW2uokntplKTQSqHR0YUKsr&#xA;VBBHY4q8+P5DeRoJZn0ebVfL8Vxy9a00jUru0t25mrfuUfgoP8qgD2xVPvJ/5aeS/KLzT6Lpypf3&#xA;P+9WpTu9xeS1pXncTF5CNvs1p7YqyfFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlf&#xA;mLyv5d8yWP1DXtOt9StAwkSK4QOFcdHQndW913xVDeV/IvlDytHInl7SbbTjNT15Yk/eyU6c5WrI&#xA;1O1WxSTae4odirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQOuT6vb6Rdz6Pa&#xA;x32qRxs1pZzSeiksg3CGSjca+NMVeEflnqf50+dk1PS4NZm0Ly3pl7LBNrF5BDcawZgay2EcnJ4H&#xA;W3clfrHCp2oP2Qqy/U/L35s+TLV9a0LzJcecbS1Hq33l3VoofXniXeQ2l1CkbLKF+yjKQfnQFV6H&#xA;5Y8x6Z5l8vafr2luZLDUoVngJ2YBhurAVoymqsPEYqmeKvP/AD55y8y/4jsvI/kqOE+ZL6A3t9qV&#xA;0pe206wD+n67xggySO/wxp47nbFUBceQfzd063+v6P8AmDNqesRjnJY6tZ2w0+5YUPp8YESW3U06&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:7a7807b0-738e-6a45-8c71-eae9db5ba51d</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:7a7807b0-738e-6a45-8c71-eae9db5ba51d</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:fdbcf52b-e21b-9b48-a179-de78fbb48e52</stRef:instanceID>
            <stRef:documentID>xmp.did:fdbcf52b-e21b-9b48-a179-de78fbb48e52</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:cc951c76-e7ff-2441-867e-e7c1a1bb6cfc</stEvt:instanceID>
                  <stEvt:when>2016-07-12T12:06:04+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fdbcf52b-e21b-9b48-a179-de78fbb48e52</stEvt:instanceID>
                  <stEvt:when>2017-02-02T20:13:22+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7a7807b0-738e-6a45-8c71-eae9db5ba51d</stEvt:instanceID>
                  <stEvt:when>2017-02-02T20:15+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -390.024 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 390.024 li
488.091 390.024 li
488.091 0 li
cp
clp
233.091 184.394 mo
233.733 184.77 234.557 184.555 234.934 183.913 cv
235.31 183.272 235.095 182.446 234.453 182.07 cv
232.817 181.111 231.113 180.277 229.361 179.563 cv
229.93 178.771 229.902 177.642 229.739 176.651 cv
228.411 168.584 220.64 162.092 212.466 162.22 cv
204.292 162.348 196.728 169.079 195.652 177.184 cv
195.527 178.121 195.521 179.169 196.093 179.907 cv
194.183 180.728 192.331 181.682 190.569 182.794 cv
189.94 183.192 189.752 184.024 190.149 184.653 cv
190.405 185.059 190.842 185.281 191.289 185.281 cv
191.535 185.281 191.784 185.213 192.007 185.073 cv
204.171 177.391 220.681 177.118 233.091 184.394 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.580072 .46009 .410468 .949004 cmyk
f
299.454 182.274 mo
298.046 181.582 296.601 180.973 295.135 180.421 cv
295.378 180.234 295.599 180.017 295.787 179.756 cv
296.691 178.497 296.545 176.775 296.168 175.271 cv
294.228 167.521 286.707 161.538 278.719 161.39 cv
270.731 161.242 262.994 166.944 260.768 174.616 cv
260.309 176.201 260.127 178.091 261.208 179.338 cv
261.308 179.453 261.414 179.557 261.527 179.653 cv
260.19 180.088 258.866 180.563 257.57 181.113 cv
256.886 181.404 256.567 182.195 256.857 182.88 cv
257.148 183.564 257.938 183.884 258.624 183.593 cv
271.191 178.255 286.01 178.666 298.265 184.691 cv
298.456 184.786 298.659 184.83 298.858 184.83 cv
299.356 184.83 299.834 184.554 300.068 184.077 cv
300.397 183.41 300.121 182.602 299.454 182.274 cv
cp
f
242.018 231.269 mo
246.897 232.66 252.243 230.232 255.619 226.446 cv
258.996 222.659 260.764 217.732 262.227 212.875 cv
262.954 210.458 263.576 207.659 262.174 205.561 cv
260.594 203.197 257.289 202.919 254.445 202.878 cv
247.506 202.778 240.567 202.677 233.627 202.577 cv
231.877 202.552 229.881 202.632 228.746 203.965 cv
227.625 205.282 227.845 207.245 228.202 208.938 cv
229.008 212.754 230.19 216.491 231.726 220.077 cv
233.791 224.897 236.974 229.831 242.018 231.269 cv
cp
f
209.94 169.595 mo
209.94 171.703 208.232 173.412 206.124 173.412 cv
204.016 173.412 202.307 171.703 202.307 169.595 cv
202.307 167.487 204.016 165.779 206.124 165.779 cv
208.232 165.779 209.94 167.487 209.94 169.595 cv
cp
0 0 0 0 cmyk
f
214.957 165.779 mo
214.957 167.019 213.952 168.024 212.712 168.024 cv
211.472 168.024 210.467 167.019 210.467 165.779 cv
210.467 164.539 211.472 163.534 212.712 163.534 cv
213.952 163.534 214.957 164.539 214.957 165.779 cv
cp
f
273.461 169.595 mo
273.461 171.703 271.752 173.412 269.644 173.412 cv
267.537 173.412 265.828 171.703 265.828 169.595 cv
265.828 167.487 267.537 165.779 269.644 165.779 cv
271.752 165.779 273.461 167.487 273.461 169.595 cv
cp
f
278.478 165.779 mo
278.478 167.019 277.473 168.024 276.233 168.024 cv
274.993 168.024 273.988 167.019 273.988 165.779 cv
273.988 164.539 274.993 163.534 276.233 163.534 cv
277.473 163.534 278.478 164.539 278.478 165.779 cv
cp
f
286.97 192.545 mo
290.266 196.19 305.13 201.2 306.97 193.958 cv
308.42 188.249 296.99 186.997 293.496 186.596 cv
289.751 186.166 282.179 187.246 286.97 192.545 cv
cp
.013489 .751919 .539422 0 cmyk
f
199.156 185.501 mo
194.633 185.581 190.164 187.422 186.897 190.552 cv
186.176 191.243 185.494 192.023 185.184 192.972 cv
184.873 193.922 185.012 195.075 185.747 195.751 cv
186.364 196.318 187.256 196.45 188.092 196.506 cv
192.71 196.813 197.419 195.511 201.224 192.875 cv
202.095 192.272 202.936 191.583 203.488 190.679 cv
204.04 189.775 204.266 188.618 203.859 187.64 cv
203.155 185.948 200.989 185.468 199.156 185.501 cv
cp
f
257.763 216.516 mo
256.835 220.358 254.992 224.114 251.892 226.566 cv
248.792 229.018 244.288 229.911 240.78 228.089 cv
236.966 226.108 235.239 221.679 233.822 217.621 cv
235.244 215.935 237.849 214.09 240.054 214.16 cv
242.258 214.23 244.406 215.356 245.718 217.13 cv
247.072 215.272 249.311 213.591 251.603 213.413 cv
253.895 213.234 256.138 214.89 257.763 216.516 cv
cp
f
198.328 313.283 mo
197.623 313.051 196.86 313.437 196.63 314.145 cv
196.399 314.852 196.785 315.613 197.492 315.843 cv
205.589 318.487 213.229 322.188 220.284 326.876 cv
212.318 325.631 203.548 326.698 195.71 330.009 cv
195.025 330.298 194.704 331.089 194.993 331.774 cv
195.21 332.288 195.71 332.597 196.235 332.597 cv
196.41 332.597 196.587 332.563 196.758 332.491 cv
206.227 328.491 217.57 327.994 226.361 331.19 cv
226.986 331.415 227.68 331.155 228.001 330.576 cv
228.321 329.995 228.172 329.268 227.649 328.861 cv
218.823 321.995 208.958 316.754 198.328 313.283 cv
cp
.580072 .46009 .410468 .949004 cmyk
f
294.519 329.414 mo
285.373 327.309 275.995 326.969 267.133 328.398 cv
274.616 321.648 284.309 317.283 294.326 316.254 cv
295.066 316.178 295.604 315.516 295.528 314.776 cv
295.452 314.035 294.79 313.506 294.051 313.574 cv
281.931 314.82 270.26 320.687 262.03 329.67 cv
261.631 330.105 261.562 330.75 261.86 331.26 cv
262.158 331.769 262.753 332.024 263.329 331.892 cv
273.054 329.62 283.63 329.671 293.915 332.04 cv
294.016 332.064 294.118 332.074 294.218 332.074 cv
294.832 332.074 295.386 331.652 295.53 331.03 cv
295.696 330.305 295.244 329.582 294.519 329.414 cv
cp
f
262.611 352.176 mo
261.512 351.05 259.648 351.93 258.291 352.727 cv
250.621 357.234 240.549 357.322 232.802 352.95 cv
232 352.498 231.051 351.989 230.215 352.372 cv
229.379 352.755 229.141 353.817 229.082 354.734 cv
228.675 361.036 232.067 367.436 237.511 370.637 cv
242.955 373.838 250.196 373.691 255.506 370.272 cv
260.816 366.854 263.946 360.322 263.284 354.042 cv
263.214 353.371 263.081 352.659 262.611 352.176 cv
cp
f
206.317 352.812 mo
206.22 352.812 206.121 352.801 206.024 352.779 cv
205.546 352.672 205.164 352.315 205.026 351.846 cv
203.344 346.145 li
201.273 347.267 199.375 348.677 197.701 350.337 cv
197.36 350.675 196.864 350.803 196.403 350.682 cv
195.94 350.557 195.578 350.196 195.452 349.734 cv
194.945 347.867 194.588 345.959 194.385 344.037 cv
189.046 347.976 li
188.605 348.302 188.009 348.327 187.542 348.04 cv
187.074 347.753 186.827 347.212 186.918 346.67 cv
188.033 339.989 li
188.155 339.255 188.849 338.758 189.583 338.882 cv
190.317 339.005 190.812 339.699 190.69 340.433 cv
190.123 343.833 li
194.754 340.416 li
195.155 340.12 195.69 340.069 196.139 340.286 cv
196.588 340.504 196.881 340.952 196.9 341.451 cv
196.966 343.261 197.18 345.067 197.537 346.846 cv
198.962 345.656 200.504 344.612 202.143 343.732 cv
203.199 343.164 204.112 343.128 204.86 343.625 cv
205.543 344.076 205.76 344.813 205.864 345.166 cv
206.95 348.848 li
208.545 347.283 210.289 345.874 212.156 344.644 cv
212.778 344.234 213.613 344.406 214.022 345.027 cv
214.432 345.648 214.26 346.483 213.639 346.892 cv
211.306 348.431 209.181 350.27 207.324 352.359 cv
207.066 352.65 206.698 352.812 206.317 352.812 cv
cp
.013489 .751919 .539422 0 cmyk
f
288.766 353.215 mo
288.5 353.215 288.236 353.136 288.009 352.983 cv
279.91 347.487 li
279.294 347.069 279.134 346.232 279.551 345.616 cv
279.969 345.001 280.807 344.841 281.422 345.258 cv
287.589 349.443 li
287.598 347.352 287.223 345.266 286.477 343.306 cv
286.289 342.812 286.408 342.253 286.78 341.878 cv
287.151 341.502 287.708 341.379 288.205 341.564 cv
291.045 342.617 293.878 343.781 296.657 345.033 cv
296.204 343.315 295.442 341.687 294.403 340.232 cv
294.043 339.728 294.073 339.044 294.475 338.573 cv
294.878 338.103 295.549 337.968 296.102 338.244 cv
301.116 340.754 li
299.512 337.154 li
299.209 336.475 299.514 335.679 300.194 335.376 cv
300.872 335.072 301.669 335.379 301.972 336.058 cv
305.109 343.095 li
305.34 343.614 305.221 344.224 304.809 344.617 cv
304.398 345.01 303.785 345.102 303.275 344.848 cv
298.682 342.549 li
299.254 344.04 299.621 345.61 299.766 347.213 cv
299.809 347.695 299.591 348.163 299.195 348.439 cv
298.798 348.716 298.283 348.758 297.847 348.552 cv
295.217 347.304 292.523 346.135 289.809 345.063 cv
290.319 347.351 290.421 349.724 290.1 352.052 cv
290.036 352.514 289.739 352.909 289.313 353.099 cv
289.138 353.177 288.952 353.215 288.766 353.215 cv
cp
f
255.905 386.24 mo
258.129 383.73 259.069 380.32 259.389 376.982 cv
259.63 374.46 259.543 371.845 258.589 369.497 cv
257.636 367.15 255.703 365.1 253.242 364.497 cv
250.781 363.893 247.866 365.039 246.873 367.37 cv
245.274 364.91 241.905 363.91 239.094 364.748 cv
236.282 365.586 234.104 368.026 233.191 370.815 cv
232.278 373.603 232.528 376.683 233.474 379.46 cv
234.996 383.928 238.45 387.821 242.915 389.353 cv
247.38 390.884 252.775 389.773 255.905 386.24 cv
cp
f
280.344 5.55389 mo
277.686 5.42344 275.094 6.75599 273.282 8.70504 cv
271.47 10.6541 270.363 13.1641 269.647 15.7269 cv
268.29 20.5804 268.247 25.7942 269.523 30.6695 cv
270.204 33.2708 271.286 35.8258 273.099 37.8112 cv
274.912 39.7967 277.537 41.1528 280.221 40.9981 cv
284.61 40.7452 287.853 36.7077 289.448 32.6114 cv
291.682 26.8753 291.815 20.3474 289.818 14.5247 cv
288.318 10.152 284.961 5.78037 280.344 5.55389 cv
cp
.580072 .46009 .410468 .949004 cmyk
f
212.815 6.29953 mo
209.158 6.97073 206.256 9.99571 204.87 13.4459 cv
203.484 16.8959 203.398 20.7267 203.646 24.4365 cv
203.93 28.6724 204.692 33.0487 207.15 36.5098 cv
209.609 39.9709 214.152 42.2472 218.193 40.9468 cv
220.796 40.1092 222.812 37.9367 224.003 35.4746 cv
225.194 33.0126 225.654 30.2661 225.961 27.5486 cv
226.506 22.7171 226.567 17.6213 224.474 13.2326 cv
222.381 8.84404 217.597 5.42169 212.815 6.29953 cv
cp
f
239.7 74.4604 mo
242.771 78.2783 248.332 80.5608 252.715 78.3708 cv
255.741 76.8585 257.515 73.6547 258.767 70.5115 cv
260.408 66.3897 261.474 62.0396 261.924 57.6259 cv
262.191 55.0109 262.16 52.1169 260.49 50.0872 cv
259.201 48.5202 257.168 47.7775 255.187 47.3386 cv
250.343 46.2652 245.19 46.6247 240.542 48.3602 cv
237.996 49.3112 235.44 50.8389 234.37 53.3381 cv
233.363 55.6925 233.88 58.3887 234.423 60.8912 cv
235.463 65.679 236.63 70.6426 239.7 74.4604 cv
cp
f
280.689 13.7873 mo
280.689 16.2671 278.679 18.2773 276.199 18.2773 cv
273.719 18.2773 271.709 16.2671 271.709 13.7873 cv
271.709 11.3075 273.719 9.29721 276.199 9.29721 cv
278.679 9.29721 280.689 11.3075 280.689 13.7873 cv
cp
0 0 0 0 cmyk
f
276.199 23.2776 mo
276.199 24.7655 274.993 25.9716 273.505 25.9716 cv
272.017 25.9716 270.811 24.7655 270.811 23.2776 cv
270.811 21.7897 272.017 20.5836 273.505 20.5836 cv
274.993 20.5836 276.199 21.7897 276.199 23.2776 cv
cp
f
216.484 13.7873 mo
216.484 16.2671 214.474 18.2773 211.994 18.2773 cv
209.514 18.2773 207.504 16.2671 207.504 13.7873 cv
207.504 11.3075 209.514 9.29721 211.994 9.29721 cv
214.474 9.29721 216.484 11.3075 216.484 13.7873 cv
cp
f
211.994 23.2776 mo
211.994 24.7655 210.788 25.9716 209.3 25.9716 cv
207.812 25.9716 206.606 24.7655 206.606 23.2776 cv
206.606 21.7897 207.812 20.5836 209.3 20.5836 cv
210.788 20.5836 211.994 21.7897 211.994 23.2776 cv
cp
f
280.149 51.8566 mo
281.221 53.3036 283.387 53.2419 285.15 52.8725 cv
290.245 51.8048 295.042 49.35 298.889 45.8424 cv
299.832 44.982 300.783 43.9062 300.737 42.6301 cv
300.692 41.3541 299.6 40.2991 298.379 39.9229 cv
297.159 39.5467 295.841 39.7159 294.591 39.9723 cv
290.142 40.8842 285.918 42.8739 282.382 45.7232 cv
281.442 46.4804 280.528 47.3263 280.007 48.4148 cv
279.486 49.5032 279.43 50.887 280.149 51.8566 cv
cp
.013489 .751919 .539422 0 cmyk
f
192.182 41.6514 mo
191.379 42.6359 191.224 44.0363 191.535 45.2678 cv
191.846 46.4993 192.57 47.5871 193.378 48.5675 cv
196.606 52.4863 201.431 55.0486 206.486 55.528 cv
207.845 55.6569 209.316 55.6119 210.43 54.8237 cv
212.047 53.6798 212.341 51.2696 211.562 49.448 cv
210.784 47.6265 209.186 46.2932 207.549 45.1765 cv
204.862 43.3423 201.913 41.8914 198.82 40.8814 cv
197.692 40.513 196.522 40.2001 195.336 40.2436 cv
194.15 40.2872 192.932 40.7313 192.182 41.6514 cv
cp
f
257.181 66.2908 mo
256.392 69.1454 255.451 72.2264 253.037 73.9424 cv
250.517 75.734 246.918 75.4702 244.281 73.8557 cv
241.644 72.2412 239.867 69.5006 238.742 66.6209 cv
241.2 64.1375 246.124 63.3913 248.579 65.8773 cv
250.722 63.7779 255.113 64.1182 257.181 66.2908 cv
cp
f
385.049 192.722 mo
389.101 194.359 393.708 194.427 397.914 193.239 cv
401.164 192.321 404.275 190.611 406.369 187.961 cv
408.623 185.109 409.537 181.364 409.467 177.73 cv
409.341 171.199 405.936 164.676 400.309 161.36 cv
394.801 158.114 387.473 158.261 382.091 161.71 cv
376.709 165.16 373.517 171.747 374.129 178.11 cv
374.741 184.474 379.122 190.326 385.049 192.722 cv
cp
.580072 .46009 .410468 .949004 cmyk
f
461.647 160.057 mo
454.988 158.253 447.354 160.86 443.191 166.362 cv
439.028 171.864 438.593 179.919 442.14 185.837 cv
445.686 191.755 452.995 195.17 459.81 194.093 cv
466.229 193.078 471.87 188.169 473.762 181.952 cv
475.377 176.643 474.26 170.579 470.858 166.195 cv
468.557 163.229 465.271 161.039 461.647 160.057 cv
cp
f
408.614 209.2 mo
408.106 208.657 407.253 208.63 406.711 209.138 cv
406.168 209.646 406.14 210.499 406.648 211.042 cv
410.916 215.597 417.098 218.255 423.333 218.255 cv
423.622 218.255 423.912 218.249 424.2 218.238 cv
430.725 217.979 437.052 214.776 441.125 209.67 cv
441.589 209.089 441.493 208.241 440.912 207.777 cv
440.33 207.315 439.483 207.409 439.018 207.99 cv
435.427 212.492 429.847 215.317 424.093 215.546 cv
418.326 215.775 412.552 213.403 408.614 209.2 cv
cp
f
393.714 171.969 mo
393.714 176.06 390.397 179.377 386.305 179.377 cv
382.213 179.377 378.896 176.06 378.896 171.969 cv
378.896 167.877 382.213 164.56 386.305 164.56 cv
390.397 164.56 393.714 167.877 393.714 171.969 cv
cp
0 0 0 0 cmyk
f
401.648 173.316 mo
401.648 175.094 400.207 176.536 398.428 176.536 cv
396.65 176.536 395.208 175.094 395.208 173.316 cv
395.208 171.537 396.65 170.095 398.428 170.095 cv
400.207 170.095 401.648 171.537 401.648 173.316 cv
cp
f
398.428 165.683 mo
398.428 166.922 397.423 167.928 396.183 167.928 cv
394.943 167.928 393.938 166.922 393.938 165.683 cv
393.938 164.443 394.943 163.438 396.183 163.438 cv
397.423 163.438 398.428 164.443 398.428 165.683 cv
cp
f
384.284 183.867 mo
384.284 184.983 383.38 185.888 382.264 185.888 cv
381.148 185.888 380.243 184.983 380.243 183.867 cv
380.243 182.751 381.148 181.847 382.264 181.847 cv
383.38 181.847 384.284 182.751 384.284 183.867 cv
cp
f
458.855 171.969 mo
458.855 176.06 455.538 179.377 451.447 179.377 cv
447.355 179.377 444.038 176.06 444.038 171.969 cv
444.038 167.877 447.355 164.56 451.447 164.56 cv
455.538 164.56 458.855 167.877 458.855 171.969 cv
cp
f
466.79 173.316 mo
466.79 175.094 465.348 176.536 463.57 176.536 cv
461.791 176.536 460.35 175.094 460.35 173.316 cv
460.35 171.537 461.791 170.095 463.57 170.095 cv
465.348 170.095 466.79 171.537 466.79 173.316 cv
cp
f
463.57 165.683 mo
463.57 166.922 462.565 167.928 461.325 167.928 cv
460.085 167.928 459.08 166.922 459.08 165.683 cv
459.08 164.443 460.085 163.438 461.325 163.438 cv
462.565 163.438 463.57 164.443 463.57 165.683 cv
cp
f
449.426 183.867 mo
449.426 184.983 448.522 185.888 447.406 185.888 cv
446.29 185.888 445.385 184.983 445.385 183.867 cv
445.385 182.751 446.29 181.847 447.406 181.847 cv
448.522 181.847 449.426 182.751 449.426 183.867 cv
cp
f
370.336 194.788 mo
368.026 194.621 365.28 194.899 364.093 196.889 cv
363.229 198.337 363.562 200.27 364.523 201.656 cv
365.483 203.043 366.963 203.976 368.462 204.748 cv
373.519 207.353 379.298 208.54 384.972 208.138 cv
386.166 208.054 387.386 207.891 388.441 207.326 cv
389.495 206.76 390.363 205.714 390.414 204.519 cv
390.489 202.79 388.952 201.459 387.498 200.522 cv
382.375 197.22 376.415 195.229 370.336 194.788 cv
cp
.013489 .751919 .539422 0 cmyk
f
476.758 191.254 mo
472.98 192.323 469.415 194.136 466.325 196.558 cv
464.735 197.806 463.132 199.615 463.568 201.589 cv
464.017 203.625 466.395 204.586 468.477 204.709 cv
473.096 204.98 477.519 202.79 481.287 200.104 cv
482.369 199.332 483.437 198.495 484.182 197.395 cv
484.927 196.295 485.313 194.881 484.914 193.613 cv
484.443 192.114 482.953 191.102 481.409 190.809 cv
479.865 190.516 478.271 190.826 476.758 191.254 cv
cp
f
391.876 309.599 mo
385.046 309.109 378.092 312.914 374.822 318.931 cv
371.668 324.734 372.079 332.3 375.843 337.728 cv
377.89 340.68 380.844 342.993 384.201 344.272 cv
390.6 346.71 398.356 345.071 403.221 340.252 cv
408.087 335.433 409.8 327.693 407.423 321.271 cv
405.046 314.849 398.707 310.089 391.876 309.599 cv
cp
.580072 .46009 .410468 .949004 cmyk
f
439.94 335.549 mo
442.46 341.034 447.918 345.06 453.903 345.846 cv
459.329 346.56 465.042 344.622 468.915 340.755 cv
472.788 336.888 474.734 331.179 474.03 325.751 cv
472.933 317.306 465.069 310.274 456.554 310.126 cv
450.519 310.02 444.526 313.196 441.224 318.248 cv
437.922 323.301 437.421 330.065 439.94 335.549 cv
cp
f
416.374 356.626 mo
415.638 356.513 414.953 357.023 414.842 357.759 cv
414.399 360.721 414.739 363.264 415.855 365.32 cv
417.166 367.735 419.668 369.291 422.126 369.291 cv
422.362 369.291 422.597 369.277 422.832 369.247 cv
425.171 368.954 427.32 367.231 428.441 364.75 cv
429.44 362.536 429.532 360.065 429.501 358.16 cv
429.489 357.416 428.883 356.839 428.132 356.835 cv
427.388 356.847 426.795 357.46 426.807 358.204 cv
426.835 359.93 426.76 361.925 425.985 363.641 cv
425.26 365.248 423.89 366.399 422.497 366.574 cv
420.924 366.77 419.128 365.702 418.223 364.034 cv
417.393 362.505 417.152 360.528 417.507 358.158 cv
417.617 357.423 417.11 356.737 416.374 356.626 cv
cp
f
397.25 323.154 mo
397.25 328.857 392.626 333.481 386.923 333.481 cv
381.219 333.481 376.595 328.857 376.595 323.154 cv
376.595 317.45 381.219 312.826 386.923 312.826 cv
392.626 312.826 397.25 317.45 397.25 323.154 cv
cp
0 0 0 0 cmyk
f
386.923 338.42 mo
386.923 340.156 385.515 341.563 383.78 341.563 cv
382.044 341.563 380.637 340.156 380.637 338.42 cv
380.637 336.684 382.044 335.277 383.78 335.277 cv
385.515 335.277 386.923 336.684 386.923 338.42 cv
cp
f
405.072 325.399 mo
405.072 326.867 403.882 328.058 402.413 328.058 cv
400.945 328.058 399.754 326.867 399.754 325.399 cv
399.754 323.93 400.945 322.74 402.413 322.74 cv
403.882 322.74 405.072 323.93 405.072 325.399 cv
cp
f
463.703 323.154 mo
463.703 328.857 459.079 333.481 453.375 333.481 cv
447.672 333.481 443.048 328.857 443.048 323.154 cv
443.048 317.45 447.672 312.826 453.375 312.826 cv
459.079 312.826 463.703 317.45 463.703 323.154 cv
cp
f
453.375 338.42 mo
453.375 340.156 451.968 341.563 450.232 341.563 cv
448.497 341.563 447.089 340.156 447.089 338.42 cv
447.089 336.684 448.497 335.277 450.232 335.277 cv
451.968 335.277 453.375 336.684 453.375 338.42 cv
cp
f
471.525 325.399 mo
471.525 326.867 470.335 328.058 468.866 328.058 cv
467.398 328.058 466.207 326.867 466.207 325.399 cv
466.207 323.93 467.398 322.74 468.866 322.74 cv
470.335 322.74 471.525 323.93 471.525 325.399 cv
cp
f
366.006 346.452 mo
365.158 348.045 365.395 350.055 366.256 351.64 cv
367.117 353.226 368.524 354.445 370.007 355.472 cv
373.17 357.661 376.824 359.136 380.621 359.756 cv
382.298 360.029 384.062 360.13 385.657 359.545 cv
387.252 358.96 388.64 357.552 388.762 355.857 cv
388.946 353.316 386.481 351.473 384.304 350.151 cv
382.383 348.986 380.462 347.82 378.541 346.654 cv
376.528 345.432 374.442 344.184 372.109 343.859 cv
369.777 343.533 367.113 344.374 366.006 346.452 cv
cp
.013489 .751919 .539422 0 cmyk
f
480.161 341.126 mo
478.554 340.574 476.756 341.128 475.316 342.03 cv
473.876 342.932 472.671 344.162 471.288 345.15 cv
469.044 346.752 466.371 347.688 464.168 349.347 cv
461.965 351.006 460.224 353.814 461.045 356.447 cv
461.714 358.593 463.96 359.972 466.2 360.163 cv
468.439 360.354 470.653 359.557 472.641 358.509 cv
475.604 356.946 478.255 354.794 480.393 352.215 cv
481.786 350.536 482.996 348.579 483.173 346.404 cv
483.35 344.23 482.225 341.834 480.161 341.126 cv
cp
f
403.417 4.99825 mo
398.714 1.79239 392.374 1.27323 387.1 3.41434 cv
381.827 5.55556 377.706 10.2154 375.95 15.6289 cv
374.969 18.6503 374.907 22.4629 377.369 24.4694 cv
378.86 25.6842 380.946 25.9176 382.849 25.6401 cv
384.751 25.3626 386.555 24.636 388.406 24.1163 cv
392.778 22.8891 397.471 22.829 401.872 23.9441 cv
403.876 24.4516 406.112 25.1712 407.899 24.1324 cv
409.39 23.2659 410.023 21.4375 410.237 19.7267 cv
410.943 14.0794 408.119 8.2041 403.417 4.99825 cv
cp
.580072 .46009 .410468 .949004 cmyk
f
460.397 1.0985 mo
452.254 .478484 444.032 5.91697 441.416 13.6531 cv
440.78 15.532 440.45 17.5659 440.864 19.5055 cv
441.277 21.4454 442.527 23.2736 444.359 24.034 cv
447.007 25.133 449.961 23.8398 452.714 23.036 cv
457.74 21.5684 463.244 21.7894 468.136 23.6558 cv
469.852 24.3102 471.64 25.1779 473.439 24.8103 cv
475.115 24.4677 476.436 23.0575 477.023 21.4501 cv
477.61 19.8428 477.556 18.0671 477.259 16.3819 cv
475.844 8.33871 468.54 1.71829 460.397 1.0985 cv
cp
f
446.328 53.6641 mo
446.672 53.7247 447.017 53.7545 447.359 53.7545 cv
448.59 53.7545 449.775 53.3686 450.717 52.6434 cv
452.949 50.9228 453.681 47.5991 452.419 44.912 cv
451.304 42.5364 448.763 40.8464 445.946 40.607 cv
443.496 40.3948 440.938 41.2086 438.747 42.8915 cv
438.053 43.423 437.434 44.0114 436.835 44.5806 cv
436.183 45.2006 435.566 45.7864 434.893 46.2687 cv
433.619 47.1808 432.284 47.4973 431.322 47.115 cv
430.527 46.7984 429.845 45.9925 429.123 45.1383 cv
428.043 43.8614 426.818 42.4136 424.815 42.2356 cv
422.352 42.0163 420.831 43.7895 419.483 45.3514 cv
418.569 46.4099 417.706 47.4096 416.699 47.7096 cv
415.382 48.0989 413.818 47.2237 412.736 46.4204 cv
412.416 46.1828 412.101 45.9328 411.785 45.6829 cv
410.558 44.7121 409.289 43.7089 407.654 43.2283 cv
405.236 42.5214 402.52 43.3116 401.049 45.1576 cv
399.38 47.2518 399.584 50.4623 401.494 52.168 cv
402.517 53.0818 403.987 53.4607 405.433 53.1757 cv
406.799 52.9082 407.904 52.097 408.465 50.9508 cv
408.792 50.2826 408.515 49.4758 407.847 49.1487 cv
407.177 48.8224 406.372 49.0987 406.045 49.7669 cv
405.858 50.1493 405.446 50.4282 404.915 50.5316 cv
404.303 50.6518 403.679 50.5088 403.288 50.1589 cv
402.438 49.4003 402.375 47.8166 403.156 46.8361 cv
403.949 45.8408 405.52 45.4102 406.895 45.8136 cv
408.028 46.1459 409.041 46.9475 410.114 47.7955 cv
410.451 48.063 410.789 48.3296 411.131 48.583 cv
413.422 50.2835 415.552 50.8579 417.466 50.2913 cv
419.23 49.7678 420.447 48.3568 421.522 47.1124 cv
422.752 45.6873 423.581 44.8217 424.576 44.9191 cv
425.477 44.9989 426.213 45.8697 427.066 46.8782 cv
427.928 47.8981 428.906 49.0531 430.327 49.6178 cv
432.172 50.3536 434.41 49.9292 436.463 48.4585 cv
437.286 47.8674 438 47.1895 438.691 46.5336 cv
439.264 45.989 439.806 45.4742 440.388 45.0278 cv
442.02 43.7746 443.959 43.1441 445.717 43.2905 cv
447.564 43.4484 449.278 44.5595 449.981 46.0574 cv
450.694 47.5763 450.286 49.5731 449.072 50.5088 cv
448.475 50.9675 447.622 51.1552 446.792 51.0105 cv
446.059 50.8824 445.445 50.5053 445.109 49.9774 cv
444.709 49.3504 443.875 49.1671 443.248 49.5661 cv
442.621 49.966 442.437 50.7991 442.837 51.4261 cv
443.579 52.5899 444.852 53.4054 446.328 53.6641 cv
cp
f
390.948 10.6491 mo
390.948 13.2528 388.837 15.3636 386.234 15.3636 cv
383.63 15.3636 381.519 13.2528 381.519 10.6491 cv
381.519 8.04529 383.63 5.93451 386.234 5.93451 cv
388.837 5.93451 390.948 8.04529 390.948 10.6491 cv
cp
0 0 0 0 cmyk
f
395.663 7.28153 mo
395.663 8.14946 394.959 8.85305 394.091 8.85305 cv
393.223 8.85305 392.52 8.14946 392.52 7.28153 cv
392.52 6.4136 393.223 5.71001 394.091 5.71001 cv
394.959 5.71001 395.663 6.4136 395.663 7.28153 cv
cp
f
383.54 18.2822 mo
383.54 19.3981 382.635 20.3027 381.519 20.3027 cv
380.403 20.3027 379.498 19.3981 379.498 18.2822 cv
379.498 17.1663 380.403 16.2616 381.519 16.2616 cv
382.635 16.2616 383.54 17.1663 383.54 18.2822 cv
cp
f
456.901 10.6491 mo
456.901 13.2528 454.79 15.3636 452.186 15.3636 cv
449.582 15.3636 447.471 13.2528 447.471 10.6491 cv
447.471 8.04529 449.582 5.93451 452.186 5.93451 cv
454.79 5.93451 456.901 8.04529 456.901 10.6491 cv
cp
f
461.615 7.28153 mo
461.615 8.14946 460.912 8.85305 460.044 8.85305 cv
459.176 8.85305 458.472 8.14946 458.472 7.28153 cv
458.472 6.4136 459.176 5.71001 460.044 5.71001 cv
460.912 5.71001 461.615 6.4136 461.615 7.28153 cv
cp
f
449.492 18.2822 mo
449.492 19.3981 448.587 20.3027 447.471 20.3027 cv
446.356 20.3027 445.451 19.3981 445.451 18.2822 cv
445.451 17.1663 446.356 16.2616 447.471 16.2616 cv
448.587 16.2616 449.492 17.1663 449.492 18.2822 cv
cp
f
488.077 31.9366 mo
487.951 30.7333 486.919 29.7802 485.776 29.3819 cv
484.634 28.9835 483.39 29.0321 482.182 29.0944 cv
476.333 29.3962 470.087 30.0694 465.585 33.8161 cv
464.913 34.3757 464.276 35.0181 463.934 35.8231 cv
463.591 36.6281 463.594 37.6261 464.13 38.3177 cv
464.702 39.0565 465.707 39.2814 466.632 39.4118 cv
472.984 40.3069 479.622 39.0252 485.184 35.8298 cv
486.67 34.9757 488.255 33.6418 488.077 31.9366 cv
cp
.013489 .751919 .539422 0 cmyk
f
365.51 37.6309 mo
370.149 39.8992 375.362 41.4874 380.45 40.6109 cv
382.019 40.3407 383.723 39.6886 384.36 38.2296 cv
384.91 36.9706 384.46 35.4487 383.575 34.3979 cv
382.69 33.3471 381.44 32.6795 380.198 32.0935 cv
376.416 30.3097 372.391 29.0431 368.269 28.3398 cv
366.859 28.0991 365.401 27.9254 364.006 28.2441 cv
362.611 28.5628 361.275 29.4606 360.782 30.804 cv
360.258 32.234 360.796 33.8861 361.783 35.046 cv
362.77 36.206 364.142 36.9618 365.51 37.6309 cv
cp
f
97.9846 174.954 mo
98.2091 174.954 98.4344 174.949 98.6598 174.938 cv
104.666 174.665 110.206 170.731 112.445 165.15 cv
112.721 164.459 112.386 163.675 111.696 163.398 cv
111.005 163.121 110.222 163.455 109.944 164.147 cv
108.121 168.693 103.43 172.024 98.537 172.248 cv
93.6655 172.46 88.6686 169.582 86.4376 165.222 cv
86.0991 164.56 85.2861 164.298 84.6249 164.637 cv
83.9628 164.975 83.7006 165.786 84.04 166.449 cv
86.6752 171.601 92.2168 174.954 97.9846 174.954 cv
cp
.580072 .46009 .410468 .949004 cmyk
f
34.2153 176.241 mo
34.6687 176.28 35.1229 176.299 35.5781 176.299 cv
41.3827 176.299 47.1294 173.167 50.1953 168.219 cv
50.5864 167.587 50.3917 166.756 49.7594 166.364 cv
49.128 165.973 48.2975 166.167 47.9047 166.8 cv
45.1212 171.295 39.7165 174.006 34.445 173.557 cv
29.1789 173.106 24.3117 169.508 22.3324 164.605 cv
22.0544 163.916 21.2686 163.582 20.5794 163.861 cv
19.8892 164.139 19.5559 164.924 19.8348 165.614 cv
22.1833 171.434 27.9625 175.705 34.2153 176.241 cv
cp
f
59.0148 216.674 mo
59.6621 218.939 60.4927 221.211 62.0013 223.021 cv
63.5099 224.83 65.8151 226.117 68.1585 225.877 cv
72.1796 225.464 74.4634 221.093 75.4816 217.181 cv
77.0602 211.116 77.3589 204.72 76.3523 198.534 cv
75.7234 194.668 74.2385 190.451 70.7022 188.767 cv
66.8542 186.936 62.0034 189.092 59.6316 192.633 cv
57.2598 196.174 56.8691 200.678 57.0771 204.934 cv
57.2711 208.904 57.9227 212.852 59.0148 216.674 cv
cp
f
130.694 167.207 mo
130.2 168.515 128.506 168.997 127.146 168.666 cv
125.787 168.336 124.659 167.425 123.493 166.652 cv
120.984 164.987 118.106 163.881 115.127 163.435 cv
116.758 161.373 119.459 160.285 122.087 160.376 cv
124.715 160.468 127.24 161.661 129.179 163.437 cv
130.242 164.409 131.204 165.859 130.694 167.207 cv
cp
.79089 .1561 .0616159 0 cmyk
f
121.574 184.087 mo
119.535 184.146 117.701 182.634 116.814 180.797 cv
115.926 178.96 115.812 176.853 115.829 174.813 cv
115.847 172.773 115.977 170.705 115.524 168.716 cv
120.003 170.61 123.454 174.768 124.49 179.519 cv
124.709 180.52 124.814 181.619 124.334 182.525 cv
123.816 183.504 122.682 184.056 121.574 184.087 cv
cp
f
6.22659 174.551 mo
10.5719 173.072 14.2842 169.82 16.3212 165.707 cv
11.838 163.954 6.46744 164.7 2.63179 167.609 cv
1.69338 168.32 .824683 169.177 .348068 170.254 cv
-.128548 171.331 -.153655 172.66 .511092 173.632 cv
1.09736 174.489 2.1385 174.958 3.17332 175.046 cv
4.20813 175.135 5.24336 174.886 6.22659 174.551 cv
cp
f
14.3602 185.239 mo
16.4946 184.5 17.6262 182.101 17.8182 179.851 cv
18.0102 177.601 17.5026 175.349 17.4968 173.091 cv
14.7655 174.791 12.4892 177.215 10.9632 180.048 cv
10.3786 181.133 9.89502 182.411 10.3011 183.575 cv
10.8362 185.108 12.8253 185.77 14.3602 185.239 cv
cp
f
95.9325 191.488 mo
95.9237 191.488 95.9149 191.488 95.907 191.488 cv
95.1634 191.474 94.5714 190.861 94.5846 190.117 cv
94.6319 187.53 95.522 184.973 97.0918 182.916 cv
97.3619 182.56 97.7907 182.373 98.238 182.388 cv
98.6844 182.414 99.0887 182.658 99.3184 183.042 cv
100.081 184.315 101.045 185.461 102.162 186.431 cv
102.283 185.425 102.511 184.432 102.843 183.481 cv
102.936 183.216 103.218 182.407 104.083 182.105 cv
104.782 181.862 105.486 182.051 106.183 182.666 cv
108.491 184.701 li
109.608 180.983 li
109.823 180.271 110.573 179.87 111.286 180.082 cv
111.998 180.297 112.402 181.047 112.188 181.76 cv
110.466 187.489 li
110.333 187.928 109.987 188.269 109.546 188.395 cv
109.105 188.523 108.63 188.415 108.285 188.11 cv
105.108 185.31 li
104.805 186.507 104.699 187.727 104.787 188.919 cv
104.824 189.421 104.579 189.901 104.15 190.165 cv
103.723 190.43 103.183 190.434 102.751 190.174 cv
101.016 189.134 99.4798 187.778 98.2275 186.193 cv
97.6338 187.43 97.3032 188.793 97.2786 190.166 cv
97.2646 190.902 96.6647 191.488 95.9325 191.488 cv
cp
.013489 .751919 .539422 0 cmyk
f
38.4747 192.361 mo
37.9976 192.361 37.5354 192.108 37.2916 191.66 cv
36.5682 190.334 35.9324 188.959 35.3895 187.551 cv
34.3451 189.059 33.1533 190.462 31.8264 191.743 cv
31.4669 192.089 30.9442 192.208 30.4724 192.054 cv
29.9988 191.899 29.6489 191.495 29.5638 191.004 cv
29.3323 189.672 29.0508 188.344 28.7202 187.03 cv
27.3267 188.792 25.714 190.363 23.9022 191.723 cv
23.5409 191.992 23.0699 192.063 22.6464 191.916 cv
22.2219 191.766 21.9001 191.415 21.7887 190.979 cv
19.8892 183.56 li
19.705 182.839 20.1391 182.105 20.86 181.921 cv
21.5808 181.734 22.314 182.171 22.499 182.892 cv
23.8741 188.264 li
25.5149 186.794 26.9356 185.104 28.1116 183.222 cv
28.3913 182.775 28.9052 182.532 29.4288 182.6 cv
29.9515 182.669 30.3864 183.036 30.5417 183.541 cv
30.9854 184.982 31.3739 186.455 31.7028 187.939 cv
32.7955 186.647 33.754 185.249 34.5678 183.76 cv
34.83 183.283 35.3501 183.015 35.8964 183.067 cv
36.4384 183.127 36.8918 183.507 37.0435 184.031 cv
37.6801 186.226 38.5589 188.358 39.6559 190.369 cv
40.0129 191.022 39.7717 191.84 39.1192 192.196 cv
38.914 192.308 38.693 192.361 38.4747 192.361 cv
cp
f
73.6919 209.478 mo
73.4835 211.189 73.275 212.9 73.0666 214.612 cv
72.8487 216.401 72.6196 218.23 71.827 219.849 cv
71.0344 221.469 69.5593 222.869 67.7679 223.074 cv
65.9696 223.28 64.198 222.228 63.1258 220.769 cv
62.0535 219.311 61.5744 217.503 61.2784 215.717 cv
60.9823 213.932 60.8448 212.113 60.3525 210.371 cv
59.9811 209.057 62.4908 206.879 63.8562 206.886 cv
65.2216 206.893 66.516 207.921 66.8327 209.249 cv
67.258 207.885 68.5236 206.631 69.952 206.634 cv
71.3803 206.637 73.8646 208.06 73.6919 209.478 cv
cp
f
31.7706 308.158 mo
28.2758 308.39 24.9658 309.847 22.2942 312.081 cv
17.7633 307.746 li
17.2257 307.232 16.3737 307.251 15.8585 307.788 cv
15.3442 308.325 15.363 309.178 15.9006 309.693 cv
20.3664 313.965 li
19.9155 314.473 19.4943 315.005 19.1043 315.561 cv
14.3203 312.225 li
13.7091 311.799 12.8703 311.95 12.4445 312.559 cv
12.0192 313.17 12.1687 314.009 12.7786 314.435 cv
17.719 317.879 li
16.8453 319.657 16.2854 321.584 16.1238 323.578 cv
16.0637 324.319 16.6162 324.968 17.3577 325.029 cv
17.3945 325.032 17.4313 325.033 17.4677 325.033 cv
18.1623 325.033 18.7521 324.499 18.8091 323.795 cv
19.3519 317.099 25.2464 311.291 31.9486 310.847 cv
38.6556 310.397 45.2614 315.381 46.6842 321.946 cv
46.8416 322.673 47.5608 323.139 48.2856 322.977 cv
49.013 322.82 49.4747 322.103 49.3169 321.376 cv
47.6239 313.558 39.7365 307.637 31.7706 308.158 cv
cp
.580072 .46009 .410468 .949004 cmyk
f
112.864 311.827 mo
109.306 314.319 li
109.101 314.071 108.886 313.832 108.666 313.596 cv
112.066 310.575 li
112.622 310.08 112.672 309.229 112.177 308.673 cv
111.683 308.118 110.832 308.067 110.275 308.561 cv
106.668 311.769 li
103.943 309.654 100.577 308.366 97.0741 308.363 cv
97.068 308.363 97.0645 308.363 97.0583 308.363 cv
89.6322 308.363 82.7796 314.084 81.4563 321.392 cv
81.323 322.124 81.8088 322.825 82.5411 322.958 cv
83.2742 323.089 83.974 322.605 84.1065 321.873 cv
85.1878 315.906 90.9959 311.057 97.0592 311.057 cv
97.0627 311.057 97.0671 311.057 97.0715 311.057 cv
103.138 311.062 108.944 315.926 110.013 321.899 cv
110.129 322.551 110.697 323.008 111.337 323.008 cv
111.416 323.008 111.496 323.001 111.576 322.987 cv
112.309 322.857 112.795 322.156 112.665 321.424 cv
112.353 319.683 111.72 318.035 110.848 316.529 cv
114.409 314.034 li
115.019 313.607 115.167 312.767 114.74 312.158 cv
114.313 311.547 113.472 311.401 112.864 311.827 cv
cp
f
70.2899 339.032 mo
69.5594 339.173 69.0806 339.878 69.22 340.609 cv
69.8953 344.139 69.4243 347.874 67.8923 351.125 cv
67.3907 352.189 66.8925 352.923 66.3251 353.433 cv
65.7069 353.987 64.9571 354.277 64.3125 354.21 cv
62.6112 354.032 61.6514 351.59 61.3172 350.549 cv
60.3052 347.391 59.929 343.975 60.2298 340.672 cv
60.2973 339.932 59.7514 339.276 59.0108 339.209 cv
58.2733 339.15 57.6147 339.687 57.5472 340.428 cv
57.2139 344.087 57.6305 347.871 58.7517 351.371 cv
59.8137 354.684 61.6891 356.644 64.031 356.89 cv
64.1871 356.906 64.3441 356.914 64.5011 356.914 cv
65.7656 356.914 67.0636 356.39 68.1247 355.438 cv
69.234 354.442 69.9146 353.154 70.3302 352.273 cv
72.1026 348.511 72.6481 344.188 71.8667 340.102 cv
71.7264 339.373 71.0195 338.896 70.2899 339.032 cv
cp
f
105.162 331.558 mo
103.76 332.845 102.401 334.733 103.105 336.501 cv
103.579 337.691 104.893 338.376 106.17 338.472 cv
107.447 338.569 108.707 338.186 109.926 337.795 cv
114.824 336.224 119.793 334.364 123.593 330.897 cv
124.869 329.732 126.071 327.979 125.381 326.396 cv
124.666 324.756 122.462 324.498 120.68 324.665 cv
114.945 325.204 109.407 327.664 105.162 331.558 cv
cp
.013489 .751919 .539422 0 cmyk
f
5.7643 326.354 mo
5.11738 327.396 5.12646 328.751 5.55096 329.901 cv
5.97547 331.052 6.77021 332.029 7.63029 332.903 cv
10.7678 336.094 15.0782 338.296 19.5386 338.818 cv
22.524 339.167 27.2011 338.252 25.9157 334.294 cv
24.3048 329.334 9.38776 320.518 5.7643 326.354 cv
cp
f
112.787 5.55846 mo
111.762 1.97782 107.822 -.419361 104.128 .0612156 cv
100.435 .541792 97.3189 3.66444 96.5775 7.31458 cv
96.087 3.46647 91.9099 .163382 88.0342 .32847 cv
84.1584 .493559 80.7072 3.94825 80.5458 7.8241 cv
80.4377 10.4212 81.6237 12.9054 83.0873 15.0536 cv
86.555 20.1432 91.9417 23.979 96.8921 27.6428 cv
100.685 24.7568 104.253 21.5762 107.555 18.1391 cv
109.205 16.4208 110.808 14.6107 111.878 12.4817 cv
112.947 10.3526 113.443 7.84887 112.787 5.55846 cv
cp
.580072 .46009 .410468 .949004 cmyk
f
44.7142 2.15124 mo
42.541 .436995 39.4855 -.0894029 36.864 .799181 cv
34.2425 1.68776 32.1367 3.96349 31.4539 6.6459 cv
30.5437 2.65593 25.7171 .330334 21.6868 1.04144 cv
17.6565 1.75244 14.5707 5.93534 15.0808 9.99601 cv
15.4228 12.7184 17.1125 15.0707 18.91 17.1436 cv
22.5255 21.3133 27.7491 24.3199 32.4915 27.1426 cv
35.7904 25.4482 39.1199 23.7339 41.9646 21.3543 cv
44.8092 18.9748 47.1681 15.8391 47.9333 12.2102 cv
48.6984 8.58136 47.6258 4.44834 44.7142 2.15124 cv
cp
f
82.3551 40.9996 mo
81.7614 40.5498 80.9177 40.6646 80.4679 41.2575 cv
78.5833 43.7384 75.4849 45.2126 72.3647 45.103 cv
69.2506 44.9942 66.2567 43.3069 64.5518 40.6988 cv
64.3028 40.3182 63.8783 40.0894 63.4241 40.0894 cv
63.4206 40.0894 63.4162 40.0894 63.4127 40.0894 cv
62.954 40.0929 62.5287 40.3305 62.2849 40.7181 cv
60.7783 43.1079 57.9808 44.6969 55.1569 44.7662 cv
52.3629 44.8285 49.4619 43.385 47.8404 41.0724 cv
47.4125 40.4621 46.5723 40.3156 45.9646 40.7418 cv
45.3551 41.1689 45.2069 42.009 45.634 42.6176 cv
47.7904 45.6967 51.464 47.5251 55.2227 47.4602 cv
58.3526 47.3831 61.3597 45.9597 63.4346 43.6481 cv
65.6744 46.1272 68.9174 47.6777 72.27 47.7952 cv
72.4077 47.8005 72.5454 47.8022 72.6831 47.8022 cv
76.5171 47.8022 80.2907 45.944 82.6129 42.8869 cv
83.0628 42.2949 82.9479 41.4495 82.3551 40.9996 cv
cp
f
93.0032 8.29415 mo
93.0032 10.65 91.0934 12.5597 88.7376 12.5597 cv
86.3818 12.5597 84.4721 10.65 84.4721 8.29415 cv
84.4721 5.93835 86.3818 4.0286 88.7376 4.0286 cv
91.0934 4.0286 93.0032 5.93835 93.0032 8.29415 cv
cp
0 0 0 0 cmyk
f
93.2277 17.0498 mo
93.2277 18.1657 92.3231 19.0703 91.2072 19.0703 cv
90.0912 19.0703 89.1866 18.1657 89.1866 17.0498 cv
89.1866 15.9339 90.0912 15.0292 91.2072 15.0292 cv
92.3231 15.0292 93.2277 15.9339 93.2277 17.0498 cv
cp
f
27.4091 8.29415 mo
27.4091 10.65 25.4993 12.5597 23.1435 12.5597 cv
20.7877 12.5597 18.878 10.65 18.878 8.29415 cv
18.878 5.93835 20.7877 4.0286 23.1435 4.0286 cv
25.4993 4.0286 27.4091 5.93835 27.4091 8.29415 cv
cp
f
27.6336 17.0498 mo
27.6336 18.1657 26.729 19.0703 25.613 19.0703 cv
24.4971 19.0703 23.5925 18.1657 23.5925 17.0498 cv
23.5925 15.9339 24.4971 15.0292 25.613 15.0292 cv
26.729 15.0292 27.6336 15.9339 27.6336 17.0498 cv
cp
f
111.907 24.8476 mo
107.033 25.9932 102.524 28.6469 99.1563 32.3523 cv
98.297 33.2978 97.4685 34.4301 97.5173 35.7067 cv
97.5737 37.1775 98.8439 38.389 100.257 38.8007 cv
101.67 39.2124 103.188 38.9798 104.617 38.6273 cv
108.484 37.6736 112.084 35.8812 115.647 34.1024 cv
116.779 33.5374 117.926 32.9619 118.862 32.1108 cv
119.798 31.2598 120.511 30.0827 120.521 28.8179 cv
120.535 26.9905 119.044 25.4039 117.316 24.8093 cv
115.588 24.2147 113.686 24.4295 111.907 24.8476 cv
cp
.013489 .751919 .539422 0 cmyk
f
12.0759 34.6098 mo
15.0998 37.9918 19.7325 39.429 24.2101 40.1589 cv
25.9096 40.4359 27.6928 40.6262 29.3202 40.0636 cv
30.9477 39.5011 32.3643 37.9803 32.2664 36.2612 cv
32.1684 34.5432 30.6903 33.2572 29.2601 32.3005 cv
25.6192 29.8652 21.4942 28.1567 17.1976 27.3045 cv
16.0283 27.0726 14.8223 26.9034 13.6475 27.1059 cv
12.4728 27.3084 11.3206 27.934 10.7335 28.9715 cv
9.71629 30.7691 10.6991 33.07 12.0759 34.6098 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: (Drekhann) ()
%%Title: (Emoji-05.eps)
%%CreationDate: 2/2/2017 8:15 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6BjXf\ni6Vu4J0s4LUa"U&C0P.ZN2P,&4AerE*k:E#DcnHbKP2Qr*K98QL;)45Rr#1-K1FU=+s9>;I.h\F`h>7DS=S=<bot/
%p!u@N3QK5ng7E8)Nl%EaFT22JDXLYE5O8m<jTA"uK^@cbmjMkCns4;A2p3`'p9AJ><TuHZAoFm%WeB3r7]YD2FI.%f5Kh=,DYXu1
%.H`mJom5rmgj6Y=3JTMHD<IisX,!NPVbumDgq6'@GsmYLFJ0FkJ3O_&45+QPkTK6b@!^0YU<d]CIX$tp'>Sn6[k(=j&'D;]!<9GY
%jneI6TE<;7\bT$n4^ij6*;?e;"T5=Y?g"cYg&/%+Ik:Nnb6&`[YjM"W%`3D";sr1>9piq@cA)A]iPSnT4=U$j4e?LC`e#:Z%s$=A
%UYMn.6Ft[hburQKL4B"`rlt-]JGF-2`rF(m(Os;o78DtZO0c;s`%_B>\5j)A/Drbi6F41sH($"]rF+>lf?:jhfIngY9GlWKY]QIY
%0*"Zji$(%_K=pj8o0<M*p^?0+k6AB!o8XhKLnuEqWtt]JS9l$;X'nL+7A80lW;Qsg&+%1u)SFt2LRgBK=qB2G3sq?*]<,gMLV`$5
%V0\OT,XF3aXYC=/S^XeJ_VV<eOX\I658rWp^Tg`:)5?WSHB;4qY^+lI9+qIX[<rpihtAApS?qfRjub<<q0mi6`0#G4ZW56&G\HFO
%HST)UaL"*llW9Y2Bs"qYkiNZ:^ss(4eYuPYJHqV:q(M"fmjJ);k)Z)iX?`s*2@U8,383"ZC`P%@H[m>Z2QIe!#-st]^TN>G#M;fE
%euAX*re3Og0)BEZ$3?/n[\,pgM&lWla%QEU5ME14iPVcmX5DcOT!\LpA%kcV*J_27@AVT@!->3O=3'4WQNt(scVfSFd^;83"b0dH
%s#:e3@#mq4UXBbLH&b*cT)QNc)_1dA!P$$,Sd0[6j5nIlp4Es@K/MtJ3W9`Hd]_fj/F>_2J1?I=pae#5o>,]t<]i=]7RE=d!rd<g
%r!\';Q/fS:Rt$.b<ZB*BDR3#EY?l+44$!/q?]KUT)T1Q\;KF,"+j\=d#OiOG6l_%cF;m]hM1iS:RH=q4TFG/+rFM9YRf>p3`(*sb
%g8Qq_F@!-OVtYD9Et5s&=2T&pPHo:VE$"^&B7o#TkeHA,YM;2A>8]?"h1*aDgZ+%,6i>OjppXrLrX*qH//-bdfB]in::YdRX5qhn
%rU*hVYgocRJk:iQ9GtC($.Y]U=tmnI7cq'Si\-<,9<:Y5-0IqM`S"ka5VMI\?T"5d^Q;>:@ia\MMCb@k#\q/dnV$nFOqP2![Bc^4
%M'oYF&Nj"WE(7hq_9-UqCLCg/dGS*c*;j(H<Ol$icD5gtIQ!3joiegjCLui)8X_&2()?]J7M*\0i-"+`i(&sb>f)9#[33rhi<ONY
%G"8K4_&0]O9#DVVD%Z".>,<8]r9X-o9\0'56L-DJJ(ne:"ASO#a7Q#rAm$fd;2,]8/D=V)bd7NeN,-[*?Al]75>@BqP?JXZLYP21
%edL0-[+!K&`^eETA+$@MOjSp'PL25HNXt+e3(MmA-b\BU`KC/(D=NAdDn!Lek[C-j'`FP+L>UkVm_"3$L41c+.N"D74$Q5_[$$pY
%VbqBLLPrBCS_A(u(P8ip!/Q>(V`]c63NL]2SZk[&,.Fr8m):(+?bN)qDo.;$[Um]Ha=SDtVp3[IdU2*^?Xs%?X7jgk6#2c*N!0mA
%GRG0ZbZS%04mQ[P`ZU;"SAOt3(^\CLI[4GS*SI3%XAq('LIgI"/IS?Qa[!a.P>/p?$mb`j*sjNVbS,iKd1i.5.\l&u#22u-$e\(=
%1_n^0GE2P31KD<>X2D&//ka^ifE`Bi8gj!!lWM`55o^\$@Pf[]IcFG)=8j_o,-sl%Z0@RejbtPP\D.NdSa],kKJSO`)8I=1ER!'#
%Y6L-)BEGf!LIpY[N([Sl<&U(??sc@=BI+N;N`$dPM-nM_$!%YGk%/lmj^oXd\7G!"eaHJS/^=Z6TdUR?j.kec#ptIA[DP`WipR;O
%`2I2&0,q#_]@EaF0#Ml.9sYsTAb6+kMW%-EAJWrn*&1A6fr8+b2iI$7Okp%PO\RrKE:iHL>IElM[Mqi_\7<,Z$?6D_]*o"Y=_K`%
%m:N'J/@6?=@M[\B6G#JE*@lmmdFj?4c_Oq^\Dn$U#0u_'3VO=[qG>kn[19W/pc%;%VAdG(3&flfD!&cN=JS^EB`444K*PTGfp8Et
%5)sj(G.jF-XJoI,f!$8P"%=s0pl&E74K11k[fWPmU`GbJ`I8RQQbXUXBqs0oP%A7dQUJ](^8:A?7A4R0TWOZ>?e'.:WnD-!fiOG2
%^X:*&&Qq)X5TUkkEqYBpEjc("><2Jb!^FT;.sN4G1qiNk(/nWQa$jXM?*@gJ@&7,3i(]=B,fQ]lb6DM0>0#T9VW^J/NJj$ArU9='
%%-2NIDQhj;R!rMgZ%asoB!%1e)baYHmq'VZ</]^B27gen.2A%7+)gXUW41*q2^%`WY$Yp+V_MtVNL]=Q?K97:CmFnRDQV]!^RV=G
%ecFAtPYHPj0;F%lqR6Ep)8EEf<&(Ad=8g>7eA'LGe!%kC1bFe4@<d6(`[o4?6lK:*PC\H>b3OG6\gn.1/j&c#d@_hU%l+M%Eb[_X
%M78>ne%HE5)p=dUn#R,pZ?Rp!CEkY%U]7YiEZ,H4Y0#GaCr12_F>rQVL:EW24Mg,^bg);_B?:+r1ZSt2Me6VCZSUZN9/8RrSt.%N
%cB)[OaA[)59^VnP+q&04UMDP@kJha]>gAEaSt-hHcAcK"`]X"K\a_L%a_'_U,N>iY\af.5nlKTS-iIqmd;"9MD.\p8$SBB\nRU!c
%rQY_&;$ULrZT&,&oPr:OPMY.;9jA^B5Qel4"^b<U5i,n$Ysf:.2-s=tV6D=PpJ&4fdbFX')5YOkrG&r$C$&fh+e*&a`Yl^-0NU1U
%:$0[JA.tI[A*7UgZkJ2='en>"$>d9,Bkuh6>,r_<<]XZ3V:@"R00Q8(jj.Q7ZW[8Y>6mC:q(jrs!^3X&D],lo$/DeR-9hT,jo<gK
%rCel%7@7R[dhHS^LtKiCFP+J!S-T9:45/)M9!Pi]L^8Hl$^gJ023LEFRuGZXb>.!X5AfnAY!laRA>0C#`k3.uAiD[uG!j\JAfm!)
%rlClaeQLmCQ?\fD?=o%\s3$68SS$j!MpB19rahC?R3c0OM3hB)AX7T:D\=_`o-eKOS^55"O:HC%1t<J>Rs$CX=qU/?a6,DL`JTLC
%3;bC_0\m7?A9h]ndN>R3o%:kH_2?@-@F?7!aBjZ\q,[$_^"n-I?`U-WH@+c-V.Wmdj#Fj^D:4F(lnt]_0TJ*N25b5E=VG]rZg6G8
%D&bKqB!42MXB1pp_:R?J:9tb,`g.]dDUK?6Ag1j0^>N"=QB&#<QZDoD.=?onET'9]pjjoBInC%H(Z2!.oOCnXAKKG[]f`]9hgfWt
%bsoY<qd??%%Bp8u2EJg<?JM&eg[*UO&^#QmY3+4uH]^T%<3qsnl54A=()jJ\XQgWsedX'BDk3D?_]J6#:0>bCf.](^Mi#&+b3RSX
%oLu^I3iTSl<A)^+5-C5&k:8Os[G'_7XnQnib%L9`IV-4@_g(4)]8X/];mVN?dPEK0W.]a]Q+Q7pdFM68S<-ab-Jb'G\GENNm2^;p
%b15)#)`LF!9m>F/lqP6/]Y"+9=f.[B;gWk:p8$RKgYCJGI_X)R9q!qYDr>1URDB/&gL[?kr%0bcFIsoB[a^:]DC:(O1Y&\r>iRi<
%WI/Pqk-.UY_g4[T]8=&r2JGd+jqLOF;`+*&IecBD2omZ$dBaeQZOHg9gX'*/qnEQ#-N91`lj!8r>`tT4+J13cGggD2Du;2tR;n`J
%j#FY:4u85*)s"=Ej>5OM%6XJOCE'0+KDaUAO_3L(j(.NLDN[d6B7>n>S0!.Welb\C7%AAAQ!V$#Z;o'\(j!<OEY3FY%12M12u\U2
%c>gT?2R@dD`7.bZALVG/p)C2#2#k_j<.,C)>X[\U%&]')j_e2cKKo=Kd4@3f#Ooc&>I/J!X7[s/SW9Rb:a+\(Xe(Af.I8dYP*%hC
%Z8Hp&%,GK>f3g(M\=KtuJ&?_m+JYp,RP2:_Nh2kfUU:9-]2qsJ9m'uJDfp6,g1unS->rN%+#h1)qu&J5`jpl%rf)lUS+&tg@Kq%!
%ia9h&I9EGPORqaeF<>[r]75\[RJ:^Q1BhD;f5T=gIL"]=!]rM:5`*AYiT;SAkq40ao3#t89VX[t4fOoqXcOeU_em8)gI5'0:u<N+
%KX1=N,j^b1SMB7k-B5pVno5H5:.9>(j>*64&A`:kVB8ahA(E!'I^?=EQ"oA,$!H-.=h1"SAm7&G)n23f2d_uTO0ps#66*XNJ(Q2/
%]-gaqJRJUkrn8.u-9ga84[3fCh9Ht-pgC'?Y9uJ+I15-GQ+RjsoiZt>hob8d`:EYe=T508go)l%U+b`84oN>^8q6jNIQ:1.B5lkF
%GA$Vd0,YPi#$1_(IdpLjNJE>IPb4N^qYmcNMcif'Aqds#(A^emf"1*aSp%t?l`U^(+&(I$^AWR.XAAUd4R'3k=XYH#nPS:W0Z'qC
%-Fbos.QV"M?HuHb>cq+C^"T<'R!NU$660EFV&GrTR[KahKG=d9]jd:;fHfmp8BYJ=P&)qL^EbR(o.H"e/h3F8/6&q'0b_a1j()2s
%e]b>,.[>IX?S?'6/#A?J797+Q%*KN['<RMbQ/,K,1dhCf>XXkCJ!YXs&3FjXHf\!l=.V-&3Zc$`%8q)p)OX"ZpEa:GrM%k;H_<*W
%=$>eFp[:4-R@Zd#=mC+9Uep>Ui)c9*+-4mKT):-F_-^QP*;oAKaU#'1mkr-Mau[[aDrdc#T`9WPB]Ilef.P%4mCD,ek;!1k2gs"`
%=G#4tS*dc0pDe&scf2Y#>'sT=376TpluBZ;6X)+Z&p2:H>!GZcg`VX#)89gGb>rC[UdM$7_;B*Pg1RO6lSQL&dnKB3Em<dm1gbt`
%Qta:&k*p)!ak(pKZK=UabMT^BVXI+)GiOtcCrDitftMVX66$e%CmDdS3J,HJ]VIE*fNNRW&I6;;"&BqK.>jSdMS;NAKpPqK>T)^W
%/")47;CqH]C7U(3o2F,r2Iu]6a(`/)1%i$:Do/PR=_O2p8#L7Gf:U(O[,8O05/iRVV8))83TG;iGC)Q\I6fXKNQiou5fr@C].YIL
%p6FGiSNcU[HtH_uSIW6hJ"tWU58fdH5@]WmSP3!VH3A%sA&b^3JUa#IZ.H##^9r8f'`%4inAJOq)u$MRfM1Gq;?YJITZ$1)3>46n
%^6%rqoAR!,SJ2NR$ImQ>=MpVOX?QMNcMtMrE>jJflXY<[k-II>`f\q5EW3s\bj'b.C!FcE.jp`J&=$[d10j.8Q"l96'qLV)9Vd*/
%Q"nN821CGc5PnckRiJ$uT!,GhT!2VN3:e(&=4>'O=faLjZ.dI6]-2+Nh2QLrrJTR-*)f"UPCZFA?^-_-M!QE:Z])o"qH4\RWm3@<
%@ukbE)3'JpL&DsPdE"Yl/>Fr)1%2L:q,p0sQI2'VcHJ$^Z])o2A2LBWPgRQ?bk,I'kcmR(M8JDI*>rKM>aO>>o"8?.6JQf8A#DQC
%nS95>Qt8<*ec4ooH6PNJXWl80jK_1EO,]gi'-Kt`+?G3`Me1/I([Kt-0@i+2kh5\[>jsYkH"eIlb+&/ocg7,9B(=_/hYY&'mq(tk
%B(=_gO>)UeVE`qLJR@Pe_]lf'`RIg'nR\A.(@]QM^0/61$i"<7h^m\)N03Ir'_'qskN3e6C*&!ir)Y=Q^5ThaKT!X(2kb[\PMj][
%]]kLJm!OO\"&no!4#a!Nq0.>;c?S2+\j6@A(*WRohph>24OIqno?g6kNE`Ptb%huNni'*bA]Y>(Ph5rTgV*u<88`t'3mJ:d:=&q=
%`PM1+2u"):ou[_+7a!&['>N/*3/l=lf/&X\9]8QN"qJmQ!j=]mSCjAi/V[o\O#&RsOm-KV8u47lQVnTmRf)d0Rpe?6Lt1"Bc7Hn-
%r0c#_L(gJEZZ<AiedoWD=NQkI\_(FtoG',$7U;Y#MbV3-D2P`=]3_XnNNh*j/[qY+j>>$+?&#,_WJGYtSG=g^iC?!&j(O&/a"0uU
%6(DVJ3:SmV6V_KECfCUJVT#=e^i,n%]h1ji[XQEjD6q^di)_6CS+p9]+V?Im]D`URGaZSBP`niZr[1(ioV>NkB<0[aO,otP<6%S.
%e]:&^ToFtj%!($:Ab#.kj.i:]P,CI3P&ds6ldc!WiiC(tj.\#Uj[kVI#(K34N2A7f5;r&Db_](9QY(LTOg2np7^LXh,(>eL^X9fj
%PTn)>"S0(DWn3\J3Q#WaQ#aRDgWK)s<W[D[EF9!53t>%Bq*u?A>bmVMJ!YXs+:#QO?Fc9I:L_PQ7Mb)tXc[=a/GuXggjfW4(N76-
%VDfWZWSF:APUsaH9DW*uM)%Zufh@PdnU(3]<MJ+`1>u/6MDBO5CcZ?/ZL"]-0g/HAMitoaS<@'?9L:W4[4!uOGi#6"PUsbsC/JTN
%./sZj1TNs4YZPO+!QrZg7EM>;-f.>KUfs!6`(Z(Z4f_#^i)riD/P7?-S+p9=PA3t#&2PoMr`>]>9Ogdk-=1"gGE%fQe,@6gR4>j]
%S=%#,2l;?B^NC=PSAC22eW=+_P7Bg@:9Wf*^[#[>VU;,LaT5/[gHWICb7qu`:Y<3_'i"MiXk.rDAu=ekSYF<s<U2SLd:HF3RA-0"
%\s]8p75n<#[]Q=LAi3J2"EP,roWm$&K3ilNdGgmTY@D!Ynrl<<GhJt?I/[rchM8jQdBg-WX/`;^0Xop'GL(<Aj_"<&<9gMZ($7L@
%_]40;;6JMdVn<$el=$_n?\6&iQ*VVU00RD<on7jOoQ5NaBp[$S.Ca2Kp_b,BLn&<boZ*]`khf`3qg^m]FF"2*TCoDrS)HfBollUK
%_]:K3l*G#LT0:6>IJ-nP5:HF5rkQi4I%W%cfmuBWYNL?8n\WHY[&jgQNHRID]!?@[n1Sk*K)`M;,@hnqau`K,-O9\*SoA!5_,=1h
%&&*(d^k3_FiMZbU[<u&#J=Cmm^ui)no)2A^m5b+:*FOB7ioP?)T>"F<lC[S)5&MGZYmM0!/&O-8LaQas^u\3?`97rl/(_[F04^gN
%Nen,#Z97&G*p.:t>a9.Tf7tFL'j-dM;oM`O2D:j=]Vl/QdBiXUZ_5Hl"[rdUs+aa>[F(UrlrDuiH;$dbg$;5J:9E:J0;ROcMK25e
%V3liUU(7c`2ND!am-=UDlDF[HAKtm:MQKJm%qU[\*f/_/d?4O'OQ*GmHO#(S0c]cSj`Ufh,KoYmlK/nBEg[*"41`jpcQ19fCNbd<
%.X/HS,:tnuis-f7X_9WKoWM3.<6$kB=FKfb']?ik*e_3XpWR;?8b@^n+?%\c/\nEr.d,d3."l2A:k,<<r;22XdRfoib/WaNq)Ca(
%-r(upGK8#,lRR\N^TsmD`17;[7li1!DQhTX!;6(j7<H(E7ct7u-n(PNP5;rG2[?,HQi+&MF0i;qpZ1cLORFXFjP>-aEc]a?o)639
%=Di"j5:kEi+?S&]6d\<]mtVfGGqsos;TR8HAc'1iRRuKXUW-*&j5^;4GpDPm=j+d*Qk685D,3-:jZ@3&@3`*s1l\+@65ZYnoiCB.
%HB)2mE&DgUPMW?8/]6[qR`r`?'B<)S]&^4VII#B9e!r?C@XPo!\Q*Be)Wf/L:MMmcCA%'gm'L.Gd3iB*=@58I&_JUX:;\-_=.&(5
%DAP*kH*Pak8h*pfPt'Cc%]e>')ge+kE]hg>?"c#CnhEJi+4pC\63C1Y[N1GtT*PcoRt,[[FkR/6h$afFd6(>%'1&BTEh!*mQg;%c
%2WGh::'>F/q:BBUC5pqs11n03fFpR.r1+K!08h[h]@,^I".;\SU/(ooUGZhn[<k%Tdg[YD%3+PCr,:%4BnJP\;ptQ)DL"q*`4@=G
%:W,@6@BWofpF`KR^<U8@Im'2]<IMZLBi?@_dpC%?4UeA.2n_q-IR+K9bLj.9]9YCTKd`qI/m#*+$DgVfSe&]RMKNEH0Wa#HR7Shj
%7\s*\BTBrQY0cXFEr4s90C73fF$Xp`[V\*=kf_Mf/UZh9G?b[C+NgJdKG)#e^T\a>b+7C/X5']:.]B7c+pSTG`1<%3S]FpdQ_J'Y
%lSr5F91V*^[OUIBILkSnlF/G+#.\of*HlJZ)Em\)/nr;I+&R?TEjOLQGOS`IkbqMcoOog^a-"[/PI-O;*/U.iacXZ$Q#riU,?/`3
%]hr\H<ULpH;mfP>Zj1JUf_I&A*JXUdEgtT_YC'SJpe()5+S=ko*;!IMSL`7<;DhnIW1RBKEOH_O&=iH3fKG,qOB+?M++g0Y'8rDr
%n>bA]"2dSbZ"(V[34YT#o<_jg%<HluG*;0JICkPc\E(Y(Isfm`-U2^sLKjH&EOie*[eo`84;l2#>4709DEFrXX/0#C.7^<Y2ZN$\
%lJi4VRSsPr-2=ZF*'*SYS_DjopfCQ>Z2q&^8]2Y]IXFF:fBm]akE5'aDl^O9:L7j$05R!Oot";J[kK`tB"^sZrd,bVQg)9d8*(kp
%5:cJ9,bQaUC_s_UnSkBQ_VJp+b&nE('Qt,L&C4Brkb/u%V_m!*a!6Js"@_EaYEjeE/pArs.U*l5JC<OpY-$uNNHJ'DQeSIjg:>+%
%Y+U"*`UOLTo:L3,dmLd-K7cfumeVHb@As$;UXa%EHb%sQAb_4J88js)In!q]X#6r[^Cs*o(JniqD)0F;a&IJG<QI(",V/eF^H2F>
%9P*dIV!c':[i;iH&,O<oXa1^aPYa7?F*uFG#I0%;s)t_HmmHa:IWt5n0"0IuF6hr13LYuj7AGPr`I>F*X.[]ge`n;V^E/u3s/O%H
%arl3#+P"F3ju=%!EUd4,e7FEneDretQ>K<Y\n4=m^MPA(&oO,k)7,U19fJCm9\5l/1(F1t2ACcFHhddtj.@/j'jrp*lD9+OmKFJ4
%V&%(bekhZHQ$"WqB"0FqeOj)`]+N:Me*MCUq>]8aQgK;8c.q9`4JJ+P+Bt0gGn?6[1k$E0%b"Y.%X3+@'NB:]ogfI&)Nf.$DRk1?
%0qCK:SVpfQg&ESMgZ8c%%%E6"n)m/BYFE)'d;>J_^r^@LHfb*#R8::P/AB"(ib-A3<;W]gd97S,^6)Ok/!k@Y[0$o,Z!gLM3s-qi
%1\JO%e;*IiiTrh5-K3LX%)os1P.7+H$/<!M:2I@Za^ihm=WPFl_mrj/No5[E<,>tNh,3lck[Zrgb_,25'IQ]^Ll_%gY'q!,);KIE
%r7c'^CZjQFe\F5\qCCp>Z1rNr1L!/kXjY'YVLK`&3ec,P?4d-9M[kFiMgs+n;`TXCb4M4^Kde>&Zq]W31=M,["IHOEl;Y[d&>&'N
%?FG1Ec]\bertXtqlb+31hKYXJ6<ug+'uc'E0pt*WF+Y:"HJ-Ee\ClaPR&`)Y@9VJj`4Ph@]4&+uD^;'`0.GMt(:h<UW),5-K4DUs
%SaQV@hf/]A\W5/a3S5:>:&?@t?,1lbj-,*pr*s#eFr5uhSs/[@&Via%V74\7og)o^E*j'[G4]7s\]qg?CTJ:\%pQ261,JspZa@gb
%c[c`^i<R=s\H>(.*]rJG1[ZT&\J45"QR]*u$5O&7p;UeaP).q#4^SXoarm1\,2kt51l/=)&rF+KE8/nIKOXUdp0"c',CAOPbo"nJ
%dNth/NH`@OLnr'K)1]NE94<G$6/5uSPcsG$E%,D!QH8djQF[L2L?^g,%o4D9906_7?HZkR*7)scma]s\`&rDZjB_e#I',Gc"%+#=
%cdMn<aIQ3i+I%_u&H6o&X*0L89_@O6,cLnkRQI[4\jU.M%aFR`6rcj^#J"e6<f-u\FOnlYS<)rQ&FY3)&K7JjY<_s@3X1H,ekV^P
%&t4H?[+11ZFj62"&n^^Is%:4MpUJdiPhT:-1rN/\j!)V<:;.=<=tW1A[$mY-H^GG\M@N%6Ct`kLgl8@r44QH<Vr2BUe&fb+QmZ:+
%c<?e=`$rTtBOjDaUcpFAI%%fR!]?,iG/q4GQ_;at^/8en&cWb8Bt)Nn=+4JLo,+ITls;-aJCLXMA%QkDQ,'VM\Xd.h1u_L<ZqhY(
%q65^d_CKajU3/0t\l+%bNGUpi@pFQm'&Tb_i[pB2c;8)/\6q5A-Q19"_l%g>3R1JmPtnAC$E"=O]%/uXNP\'O\-o<M`6R:\dHs.N
%GIgj10I?nO@+&.g_!\T_AGIlK:7A6BQ4;4\jj&-q?mZbqj-aFCm\IbQ$]B5Wm,b;@&_`;.g7=F.o1IPgGhr@=ZmXrhDKUNcpe5+p
%5L[k!f?h">MWrrE1H[8`ihE/?YV;fElD(Ck#SFoF1e71=[jr0#)Zkf\3C)r&Q)e=@]P=hc/*p]geqEk<lS5c]!An_^mf02U:Ig31
%_=.G.VfUh$bIIcKoE+;(LtXs<%V^[f2FccVU(O>3n?*fI:K#@"i8bNp<kEC;`Z^</<U;)lCB"WR#;E_M/+>JE"eq!6nW:!(mO,T8
%oWs`S*)n22<6n/Y>0tO\TkY[h*T?""Wh"#3P=0(3rFY.@Bk/J06Uh\KHtJ%9DDn7>Jh,2;`]9;RdS81$*pdgIk<@5H6/[6AE*4%2
%!.Q`f<=\%0+CRMP-ZC]+J]Xum)F(EIlse1>mjr`N1t8./7s<Nc)eEb^O\Q+5OMW*>I8etr]4%sEU#XBsSr?G=0kjQ?/TZbid<$6+
%AeD2eVi44p>jg45H3K+*:.I_]QqN6VJsTng^bg2F@B3<IO[>]`"CDF+$pADaj'\^4Q,uD#mWkoDnNuh0@s<\(iI#q-3o1&_lY<S]
%c<R49/kK>';T@LWmVsq+PoS;1;m:VVJ&;%gfJs7J17U`e#H,GIn6mS10/orC*+X"=,tt^\[=]_>3o#Tb<%caPUrMDn?[FJEQ=[F=
%=.DZ04V*#`E.LlB2&:mh4"PRg$lG8KNDh-6VZ`J/9TOEj5CKk>/7E@GKnuk\*D9R3OLO!qr[=11oE$O,U_l?iS3ggY6=8@Q[H;bJ
%gOkJ+(XJR&Yh_FfiStm[dN948$nQ8-ge9c)]MO6W1C)/Qe$-2c1G^U&Ci"%e:(_)BV'fs=eC.Ln5!<(tp\=_[q>J0OH10;CqH@O4
%EOL8K]_/pZCLR5A7]i3LhK@^<gN;m8YJ&V8ZE'QLmsMja]@Q4J][E\0p#g.fmT<N!pq:p`@,5*mq3lfC[^siRY'"*-,oC62A`m+7
%?p3t\T0@V8ZaQmNK8nUF-^A.)J,f/X=?G%D0VDJubq48a[sH$^?e3cJ`J$XR[F5;ikaak_inipdMX'WAp$_SNmpMOBM=pdkBQ&+.
%i5C!>qU=WEiC<h6jeF0mQG9N'SsR0m/U-fG8&^1mIVF83H32"2HBl2b^$6D0^:a'glYH1fb9uUg]o=i:URbSNDtf,(HfrH'lI5Y!
%\0IA_GN8#Rf,":+mmhB0\p\@BdJn[)E3OSbacgsVY4c:ki;<GIb%AV<4hl!6N`K0gF7S1_op6'D*j';7IoG&,q[]=3I=C?qV,Ab7
%j%m'QRjU:14LArWQ+]r[m^M<3fB:]WqV9QsMk*A1qh:SnHU!UB#AYj9cQiqZY.X_=<bPP%2]b-=?!6_:T-)ZIDlJ(-$_>GKrTJX^
%Nk2;+T6K20b'E_Kn"$hcbI*>+1,.D<I6>9S&?aWu]`usT@:sIp@sdmo]?Q&F_:O9rgRm7_:V;\<f12l[X.P]snXV>_muulROS$J>
%GR)pmaaN?dDW4PW=[.Do/ntE8>MZRN06_St9BF]NV-B!EG&S975PRja&./hU*T,^SoZO!WV,dKClFY:WN5)X%q2K_7+2g'.n9aKK
%P:)h-UA4BQZ0pi3j40F[pQo6DS'd1g^K9`])$[=rT1;iT&l6?8J%UhETd#kFCV=s\b?YOg:R1h)rE^om(;E'`Sh.SMYur^:^UrnT
%^NmNhXEaB5E-PFJ(&%&rFpj'lU'MIG0-BUIU[#nEpYVS9UK(d^9hF[&o=-`oT'nct9`*0dSfDQIBh>#Unq0G.m]='2/n*'[biY&d
%kj>s-s1G_il(#FabId57&sn!Deo?7n%i6:h[t:f9X-k:t\b'L5R(:ia%(#NgEIY]%XP<'lF(ZBig9PJKd1c8a[C1,.]3RCDhWnNR
%blM]/QJQT\IHMB_%T0/&aO^cO9@_o1_UA@qp4J>\GQ6^cZ*jG4(j7qJ<k.mK-(5.D8@0?u>D8j82Tab>ijTP<fbaJDp33^A[/b9u
%5PWWN;0_bVICHS'o%^_@(WY(S7^_c;2!GQ8Cou=Fa7&$5h;6H;O6b+%mlVYY":PD(#[\=UcK@M2lh)_W)ekio^M@,FmiYp?ITkrP
%[;R,l_4qb<EaVUB[_^#@W-)l.WQrIYHfDl4m:S.Z/)g'4#41UQ#:O,pNugOcptUgSqAFCDKMUcS*cCY2Wf=m3\*(`,g>huAGAqU&
%R9MZ+D4RiC4kqZV2Z;7r@@5S8f&l./7G=4=Xd>c(cWtu1N:."@Q1H*lbQtRQl=F#FpHIEj!F>NrIUU"JI[J'#?%*!Xn@nJecQ;3V
%00U@4@@2^;2[DohLYf^G)`p7om?@p&Gcu?i\GnEt')"tpUBe9RL_*Cubn.=LF$/rk&HP9Z:Ka8Wo7p^S[p#7/LR#oaOK[QX(4Ui.
%d?DVRUe_@'$Z""H>4$GIM7\HiLW(&_Sh67/2k:3G.8b0_YfZZq]5)KRp#f?sq=Q2nW%63LpT&&rmI?@Kp[#d]rq-JkqXG5En(-:r
%rq+\IO%W83B6!B:4Lk:%8>"=;DY%sc+,3)N#5nU_XA[j%55n_lkM?QH_3XEAc5umu#PcmX^_TT2_2d0c^Ks8\?T7>RNL^,-Ha@TC
%b\uFdbLk"-!Xo0PgH@so$?[6b`5Bq)H!1G7:L<Vt$hLRQYhpfb+SPM^HGclqBS>Tu<C27F&E,(<oquCBX=[`[=IVYtjo>^59uDd^
%:\RL9l1[;(%Tl!W2&tRT]LpR<Xq;#p)uPY@UU>)jS1hO4<pke^X8%haJIr5G?p$U_]bukro;!.!ZW.hhj7E^=M.`g\HMf%#+,tf#
%;;8c$`JD;0I?tS%SDKr8=dF#9e7D<7FTAWN0@J9mJA^:u9N!-ie<-.ZGI\Iu_p)n]e-FqM&UaL5l<kj6'o'R#mLa1r<iS0<<_UaL
%8a#?Y;YhZq>)!rYS&BJ:N\FZ]OhK<eM)Ru<bZY-Aks^%n1e/b5A.EQC+YS.:H?%CcGS,m"o3.kR78eC+&mRp+5#Sm/$,]rBG+NF\
%i$f(uWbA_%8SKr\Pb8&fDd)?>`l[Yr)U\sKDg'^q1NE&l>pO1E@:BP#,iT,)#P:Kp(pDn06I'&^3fOsO0U?dGi(/Ghn)2HtCaSfU
%C*BoHYL:G%&[@DJMu"IH<V3?>!Y8U^mb@XG=I8K>lnT&\#DHbus5`eU\A0cO!uA"Xq"@,iHEkf*k-g:8,+Np;iB['Cc`NLnHA<$_
%<iiu=O#Gn0IqDCAin`8K_8%;S]*nme8Q6%,fZ+%@iDCebZic,f?ECd5_*reABit!4_pGd'Q&e#'JipgFSDohk8WP9mnQX<kDf]pW
%6ks&krLoClX<3.MrT:qc_Ei+PZ2&'GBg2K0*JQ#F"`nMo"mnO1"%F>?qpXMb_Q/[h]uULrUt,aEAong;ZmHb:Dl*#:T-Am5chE@D
%3tK(8l_EB#qm'LPna?'?4h!@kk?HbD@7Rr.475.S(8(1qUlul9l(DZ&H14r]*UM&BhL#W:'Mi%Z&!gsWT0Q"-Ir'(?+N<_D"2Pp:
%:oX4A;t+B%Q&4P6_#)!L;XsXrUQ*uOGA6070m<trpd6"OjN0@9T&+q(KbI^M*BEM.+4S&1m-VQEK4((JU!UQ2K8;J>66R!I\IYGt
%`foEHie+-k_JAu.)u,W#mVeUYqQR5(Hh)Dao*a+UK>Ml4;SggBCk-m^No*bc\+bh`!2I[uR.T$>_:JaWQjJO50[.KakhZu=pin=U
%4fc>WUQor"P$i!C*kp8,P,aR8hi=92`N9[-ankgc9n>?"CoQ7,IUCuYn9J,8AOcXl\p3f.&SZ*d#1ZH)MA0?k2%3T>I9jO1:+^F3
%?JK!rl0F[kG=n@Lr\lPJ1jfpeeV1V.T7!iJo6gN0hAT5^U%)%D-2J_G$EmeX]Iaj?<6YZQbd["C.+%/Uj#q2@`Gmu"m0D)dioBj*
%NO-s?Q6/9C3]]%eod(,2beI7EhgGWIaPKM$H'^6WoQC+;4MF6+(kI]F(tN`8;7Fp%]Yl]-G^61K3^`3eC2ieqLGh6(SU^V%l.bb>
%1W#ip[drFqD2<G_DPcSalWH4"WdY304RS$52n+C+&!,oN,"07/i=DNOFo0,Ai&0_"(^:CdII=>OH.99`f2gb`cR3a\_PuF!3U-!\
%0-%\TIm?B*]")(T8tX]\bim_hUoO`a01!;$3k7p;gC[c!NK[XV^n,BjbLe;)fZ(c[gaaGHn0$T-UhkeRjMYSJ-_Gi;4kQg=P`!aV
%n`\)M0+T^ZGsu`TF.G?VOm%!:Z'3d`Nm>k3549<ZqpiZnjd4lN,F`i>hC^ZEFE/$_E3]A:<@]]8?Wf0XH68dQ?9/J/I`#1Ql3V>C
%+)?#qm]hDa?`Z1m4`OB6a@ir?W\6TR>46Yo+$F^A')BRMqG<X9]6A`!R-n:0pS50;o'H-nD>ATo0$tW-"AUu\a(3%g(I#@TW:PZs
%f6GmEB#X"7J;54JMIHD4%QPBoSK6EC#StAqLV(%U.<ods4,75AT&/9cZC5-X-\o[)c%X_d^Yl1.5&F?ol44*3.%OU+SN@)D)Vk%t
%9/#0<%X6KC1C!J*pk@t9cED@+K776IJ*G-smAk^<N.:RUl12&uHFsAIZh"`UQHsJA7k84FK;4;O58q?"dp'=q5FtompbQG`^Yg3C
%:\4:d[gO)YSG!K^r`C_r[t4he+5"UqgEQ&.ZF;gRQ](2&L35hqH$TD:IBre9_qI^EYV-We;$kS??ah(_NNufk*rd'BiI1<;Z"O:_
%n!>q!pUkHI/DKK5s,M#SKcd_1j]AYO>(X,e\KFOef^cQCrY'+>ibi3)E:(\rJFG7:\f8&t]A9mVdTkIRlFu00Ge*A<C#h9hYun,.
%4r(OWqg7YoS`jA;rms6@^lhg'9CpK%mKCj"Q[7@INmcaEo,qp(gm&\"$R`pB4("5]gs0hgT2^/^Tsp5iKnB&5otfIp,8B_!c/YX]
%mIXfp:Wu&9GP@bPFQX]7dQllgc^S:VpF;Cu]t!Q9^!5U1L\&^$O6!4UiShIS.=$3M*VI%>F)5#<G$'#Xe@_o4^-kehh'm1T^4?*j
%[f*p>>W?i"X=)=Q3%o(h(;+&T1f3)\)aNPs2%51DFhg>m:rZW&_.%KE0QPnh9*h;aT!,7[BtmlU2m%Eoq?Y^!n+WEWWt2\s4F@!/
%h&f+eVC"a7pA\#2c0%<pf?^p56>Ws\8o?n<XbHK=3Tb,??lR9N&3bIMiXV8ks40h"CC`Vqoa3?9f[[na5CW..>-'W6L"+o?60Z-F
%5E3'*X5qj@1FKG=USA[W]oQL.^6;;"T%An@%r67&cF;)6WDINiVQB39gsGlXo#m#hcc$\R<gVHi'<_o^9:PXsHtg-qJ(q4"h)lO+
%_^5%sWUOHSSSL</)HErd?-l(6]a(c,?hR@%k)1n$Df6&#UXb(thM9OJeN3iP2igV@*\Q(VkJ"bJJUead^VON0lGoJ*`BFgq+)h5F
%*I;);J_\u7&;@YmRbqusK!WcVn!&]V]*G1C[K8V`/j*F'lQ9->.CEs0!ZemZF>R.i%dn-Ii6Sa;e]%H=+i>GF]e.HRIg2-3H#]b<
%3A7?,of&B3h;^/e;!c[\0%4BS(HrHR?kY2B\7CtZSTXJ\jH05JTIB4mY@:o<U<krJooMM@8>+GDG$rL"Z.W((*uuSRU&tkcQRJ.1
%[Q\3Z0t6hp#Iuk`-h)IEV(WqmCNmlhd>+png28YFl>/=$]MI=:<pARq"W(Dg2$]8`>+L[M=2LX$<Z`j'cekON_Gn,+W@4l"g`@*n
%?aSk\l:G^h`E&(21WetKcZel23]X[im1YL/KmW]=]lDg,SoC@RT!e5lN9q&`o1lHS]p73Qp'M''2r^P:icL(4NER-WfQmXP_TI/[
%/UcBE$SM/\?7iAKDsUMKmL89hEA[Td[8bgADEV2D^l.n\N-]a;h3ZCW\*_r9NCW_tf^-[&H2@(pYe-2L9,QkBhL.B-"`i#+S/_P_
%T0<)Q*r5NQKI6ZS\c9BcYMTiA<IZ$@&I?GkTf\r)k'^((q9Ad4p[<HE`U2r+r(`U<oD/1pT($Xh=]hA(DNMoGft4_Ab7$P`YMC)Y
%ghIA/F/OoD[nq>Jn>LpWHDAomPKN]H^LqD5g0,N*1Vdk,*%o#(HJC0%q^NL4Beh.Qpm@;Ca5M@"%#1Grc\jMjSUU]^nUA2sEj'o3
%mCh^H/fiL698R(l?PcIg,Me.3o%-A:GeiucO>l_r;hC4+aouqfIOhY[]thFYi,<ab=;_.RhKJ_n>5,l1gVjuT^\fL7X']eCR.a7*
%bs#io-Mb=8/g%j>QaJD,:u;<[^n*\>*VI,tQIbJZLZpV7fL7S^_]DqG[DapD#$fg7qWK#MhE3tQ]ITR7pM-r[M`'.;b7U^+elnLo
%S&>n"=ku(7[/-OsfNW,EmrnT1F=P[\J(VSdZ*I4j00ZHh<P2>B)/amcg"o+/0I]`53e4nn:dT5'0)1A#gR'tR@O:`dh>?CVIXAM&
%.eX6lgA2`COSasT;R<S8(A715qYA;!U@q_frDB`h'_L3Is0*E.Vkj0;I='dq:g2SS/f.:sW`+CnGXjEn?G8@PrRT7QpW8I$kHSi"
%c3@?rrVl*-k/*JX>L6V3ifdYO0/1J>CXDY2oA]<;E$)OEP@n)ANnWA]@7K#8P,6bV,@kA-Eq(ktoYo6!\+BIL;t,X8K#3!,@m(^u
%^Rjnf<3<`Mp8UciA`#&'k3RALY$^WN'VF8DYq@60d<`BBJ".4o8<i7[]]I<tn!EHj4Dbj0>$i=JU1n<#>AO4\+&g=;>Q&sHCZ37Q
%#C]8JYfPf&Au1"SX8hIQ4:L;fo9IbO_V=2%J5JglS#m'A4P@oeNRP5^I6>rU@>=L'G..g\+5J4o@X1uO;YtD\_66BE/3bf&h2UYp
%"l$5s1#=M<hjQ&Y6[KKc9b9V(]:1H;Irr_&%UJPZh5hSL<&(CuWaUnApQ58Bkf'[$''*E4[?[qRrPINJG6F%B'r(2o7BGT!ZjL4j
%Sfi5&k6ieU.pq/7Hd1qF]D1L[M^TRpf9T*KTJuSEYRtZO5]Fk7h(7C:g1eTm=8?(p!j(L&h<21EpMfZ?8$R>TEII)Q=Y8M?:>^2%
%^<c:OVKI6\G3dWUbsr9p5Dn%J`?q"#kLRX?)rcRkD$U@&*,f8sFj?<Qmn$bQR''F?d`[6A>/\5Y_#jSF="cM=<]/=5!5&oG9.luD
%d4SccFf5^)[p?33koNg)PN-G[^Z/YnYS'S[VVE\fNp'>op%W^\YgR'746.Q<@CQAY%m/lrqnd,s".0EM9bI5%L%/aZdAr*A-p-eF
%)S9)jJ+Xdp[KjK$86729*7dX1g;iO&Q]qiJ?<i;%lan8^!A#G9B\,i296S`"6l8e?Q^6lZo:Z"0Ts:OXMe*/uO9@VAf_5EkU0,QX
%h_`%`$_+'dAJP-rji3,:Gr\#B/!fMbd^1%:oX3a>%p8O]8N8QX"2/l"WCEjT8,@6bI5#tr$TWXk>H]6q(q6:g'?n6>`b9A9m2a6K
%U0\7>O;"*e=m!GZ\VG'j=l\/3oK)h(AJ'!=qb&Zr0[s?FV^=/B,>'cE8W(>N0!=YTWR2B<7OK[1?Fe"KX-gCB.SYlcOd`8;-KWBT
%qIY0*Do;drWi.Eu0akeLDAGU2-Jh3>[LkYlRgSc^gG"@/jXJ;M@e*MsT4CXnVVL[sQe82JUTk=U#1eq_1k1A)2ED+qmRjD.*d't$
%V2"]m:C(4*L%`F5Uaj"a[8cSfhM'!gCZ40=Vf?tCc!Z18=$@)&j3,8?Bhd1M[HPKOnEZ)=HahOA<R*Y-7TaL*h;n#;]6FG<WgW,K
%>`!l^:RV?c2TflcfX)E+Yp92E."!!mHi!%;cjoNPlF#j$qp5_Bf6\@u;F7fQje!L^[Fj*1pZjJH3;U>7X!lOudSj:.A;\m;"oa\(
%]'@.:jGD5f(F<HLf[[`@Sb#qbnV_le\3$s[cr3ntj47R?(=u)KU!dWqQ[:gUT4)C%Xg5"H1VoLr[HQ/AX(RABr@]Nl`*Oo'=dZPC
%C0'T8M<ucHWHM0tm`o+!4\7dor''[jEjP2nN6cIRf3#*WK7<D4ham?.DtNV\:!&`aS4f)cjsQ=qOD9(n$-bisGs?EtP>J!W09[Tb
%b]lq]K"AI`9I7Q+X$q<++.N$cih`VI<('%_Y+c<*2qSLAs(eRK7&uZLSu]G5B9%3EA2"pJ(T&:YaD+=:0*A]#/QhFpLM-S*EO/oN
%O)R+8U,UniV!r?]6'ocC'](9oM5Sm`/p0Y2"G;@4WRpKlTjRboo9J1R62qc*[FOX2,@`N5m@aT*aY4rGclVm=7ku&)HsQR525BOm
%Y\7)M1X$_0OEAUV)V95GrCY<kY^%n/^7L3R7JSIEGsGih]FguCN/=bTD399mHIuNYrPY8tPp'id]SiJul@.ZLjlc-6l1%C3T8Bb\
%-Ptji5O9BiB>K)m[hn+AiTGmS^b60aGE2_$6XKhj&;_T?_#:?%;b''H`mG8[\$4>W1`+A`fU%c7fe2EQEu0-bZB(%F&cU1^:>pi`
%kWt4bE7PVCr+=U!Obq-'M7VKs=r/8Y9g<cL<J(u00'L]TIos5_rq69Z5QBrrs/k',pabh.QK<snPuk,""o,9<.G'=s!Ynh'U*YM:
%ASbeEhgXR'cf(ej!;eh_qf+Rhl&1h-rWs\7s7qH>K=n$#O^#15437;Zj6%<hG(&7;YQ0)'78<t>#?tktAU=jVIG`S7V$HruTQ+B&
%Kr]S&qftt0R7!@<!f(/i5-U\uCp#<rK,eS1eCo[)*rLt)2t)".bmE:N>:r^lG+_@_!LT(;[c;%g-'XnR^uc-N8MNL<BC6A3n$q/L
%beq"(a:4q8+Ha-Ma^_BaFLb1?_1Z*]V$E3WM5pVgks3k;p%(dXY(jd2GigW[P]DH^qc3\QG6E:GV!cW-d%Ot4?-@B`d&qD6C]Gtm
%fQr^@NtY$NkP1J_=5#S*BIV9ZFA(4u\fE;>9+?(9[NE;f;LTYm'mbRN,nU@B#jH$bJ3mh=.9N<00:SSXnLHU2k*_&1pe@M)27G1%
%CGE&1E%7itS!Qk]BX!,IK.ntJN!su(^p5I$Q:M3O(cD&\q]H_D,t9]7oi+2\^pQ<]N!,a<Kt#Gdn;7:dMV.&`]lX=o-pTf&..#=Y
%jNg'+ogM`"oh'KB<i(@T&-C$1;JR`Gk!3:('KA]<[)+hR507$=ili(n#7"lDS(i3;K`SddoSP?Cd=MUUH3(oGAP3IG[R]nA,E[)P
%6j*uN#/X=N(qCBK]gA*G>81MMHBK(EU."c=\g?nJr[8M'l-`*PE:Z?qJh89>Q:E_tR.%799*#FaCM<uJ=s+dt6mGO@9[KWA?uckq
%_.*M$_(AI/*MC:"ErpX-*t\_ShD#WQ4!%cPQQXm`_EF7u2[;?_KqlJ8NJe3!WAcQuGE?bF.6guqO@G;^*B/LH#1Z#Q,G?&`=Is+D
%W!a,D0FOSuSoHkH1c.25OAS]U+>0r/AOtHC5[;?n"S6KbkW)aL_9Gir81eA<TJ_n:]/5eG-l%OK:<;u'^u.5S4@*>jgpPq[]P#+d
%P5%/>X$"'6[d[*)5e5R!1)gfAZbd=_L;>a))\iOnJEKCEK.?R#"q,&k@27W('(o`A("@d&b=M6bj;hJlc(=to@_e1O:^q)epj!t3
%32(Z$#$ER9d?*2(qbVh"$p<t0"hBdM(#4Q[mV4XDTR1MV6V%T6#Wu9T(H7\tFb\-E4,I@LAsVU97mM_m?kMa%F.:/"p1^'<?s''m
%\ns$kTK+=d/SY_]D["W>BZ*/<-k8d).g@<)8)>6Db:q/[Dq)5?:2oisOf2DSDC);KV.%f]E-/IAQ>L"bi*C.j[.p3s$Q5Tl73-98
%ju0A+l8D/%%tIfO,A9)caW*T#i3GA-DM/p!["km]/=U(@l\4YEF31EqBgTdtp'Y94:MJoUSWJQ@k-i0@?pXse4$l6r.D;CYIBYTr
%9j/i>HND8@:=Af\2*j',;QSH#,YrE`T]*`$+R,Q@i%N>tp^-(H6tf\mls-6D%ZmOc:&GMB,iPK*@maXT/ob9_2$UjpQdFg'5ah'R
%%2OgXQiPK,+OXF&C)C+C!9V+D,=2QZ"*?WTAJ1k1Vre;i5d([-Rd:[".aY]id5?lA?t,iBC4[SWjUg/=k4?BT[.OQD%ugTD.")e1
%i<Hg(#UIeRE6'JK>rME]7ahDR/Nf.b"hQ3O]#,ALUa_%%BSg`rU]+3m)`("q*Pn\^R:M8EUrDscKP^#j#hTGeX:o'+!c+C%g@k/j
%B\#fWU)^Do84\ROYR1F"a;>X3!+38#*YYcF:FWM[BrXg#6#-%ZWoQ8ebQKq'Nu'7sCBE@EP/84NOq_$i'`<DjQ'5`A\3hC8C^q(U
%+shsu?:pl0%cEJH]1g))<$f>KXbeYTp*W=*$;+d%$.K)D;3r)5k>echd@bpl58I]`E$YQ)IfO>C&e+UA=R@WcFr7bMkd<oFTLqPs
%/.cXX"XmqTb8N@f6EibAi((Vt"jIKo'Osc)d84D)"i]&/p5sIuRrcp_Or5ChQa#+j%CC%!?r\3h/A-Q]%_F7l")`0qo)IAX!NC.f
%IjB*1>m]$Z*rD1S1Y2uQ6(cBr(gmXqkn=;S=m!--W),Gn<nQ-Z#@$YlR8RSfR3n8dQ=C*VU!t\%q5"oY5b+WeX?`+K\HK780D)W9
%BaoG$lnuRF8KVfA_T?ef,EZK=6`n0G#(#+A^,oqGYk,"%K<pK7@*EJ)Tl!gV6;dAgn,eqX'E^,BAN#)f$F"E@i[+)MI23N"MK^(;
%!ZjEN!dt)F(^g@1[&;%<E:*_s_)p$e=:Cg\L/Lo&OKGV:3X$"7_njCp'rQc6`T+am\LmT1Xqho0d\/7CD2ZXkn4ZscRP>'jPV`CZ
%=CoY8%!#UR%JF@=A+i'HeHWP1Sdq9`.0S'"3C3b)'9)3apa\WZqKb0Lq?cQ@5t(*[_!QZJ6S*qikk27-!L?K,Pe',`J=#*2^r'WU
%aHp:A)>9<T+u9=_RXg5]-7I"OJ03e@keJ_W,P)@>F4_J=@[n7E5^i]^^;]%_lmW0F@3"(.Zs+B_0!]mH*$$6[8I,ek8`8C#p@VgW
%pu%)4%!J5_3X6m*#_a\F!A/!l[e>a#3>V*S_1Bs>(e,2`TTsR<hJ<P$NFJO2!]Fgc6CA6%O2;bb?u,)$]4JUb@;O[@L;*KTO!$C]
%+SYjU-`O84T+W!Q:dF!Vi8@QaedL\Wdagf?\GH:Q44kcJ&.".h+NIR=3l"Drmn<^S7hQYODe#@C?lh"V@%_5XG#O86%UlSR]X:Q9
%fHYS@6[MEJoKIm]jJ/5sO?TfcBO08VTNtA*_#47o`$_dKr\SI::oH]jg9)_]n&&iof>Yhg@R4sPdo1i)_&f@T(aq)^7=g^,K5Eot
%"$Vf3#@=<f@"'$Z3G'+s2GD=]"cj#lnZkj*baQ(7%&-)`iZ"8X21p%Y21a\$K3I4k_d71$$1egtZ19<=Fu2lQk]HX!1gNh7Wu'P]
%4(KcL"f(E\ADp-J2<K/q&ibmP=]cB5!t/LkD3iUi4Usa\o*3]r#e79X0iQI4$Ge7\_<2kN'9TO,SK%3m"-/.FK!7%NhA=/\A;`^a
%3Fd[>_V@.U"?&UScdtkb4E;<U'IHo!_#C[PB#.6lCZIRM[PlbCE]c-.d'dUk/^1#Z=b6L&6@cn+:J(ZlfE9sKTf7^rA-`b5@[tNM
%-9ok(,!_SCV&;.aR+X@--Ih=`YBL`*31uCaC/6KJi;,RIAPr./nLUY0Q_:""a6Z"KA)73EO0Dcu*4/'skAUK0$R_;KfVU"Oj65V*
%#'L>?Fc9j@:EYi,o51'27XDp^>ehkHj\n^nVe@(*';],"GQ9NU&5X.FnJs1kmr<.OPI1sLUQ,YTBk!qHaS"B)1^=8ID32U?bn^MB
%-Q09^*0:elZA',sF:fc`3^j:9S4k)X&1PfQ+PTp`o1YRc!j97IGih&!iaAFHj*'@MM-ESu\REp$N&%>7Qh%"+L>]#V)U&ZP&j?Ha
%%SQnhc@MP)]*g;=qR2bkJXoPGq3X1i3?X58BnQftQ:qZ4/1d+I!%kq'bm=f!R!/7%fd?ZY$HCHq"h6K>qp0^>_T5ZP1kOioV)WQ&
%Ne[\!C%Wq8^o;c5d*4iX4O/IZP"?(40nE)Oqj:m&Gac.f^7]1DJuk]%=f;=Z+e!]<''6@<Tl[>2"%j9<"GVI/E^sN/NYQ5pbrJQ=
%N?mQCBnj(<R$$qj1QnOrRuJRBCWQS*E&(fUQ@U@f(5%;ATE%fWEh>`8o89(%+V"gl0*Z^)A!h`X]q?eS'.D)9@o1q,(;a!"$0Ll6
%)khidT^`3I'VU(/6oN`(+p!mpHifZF'QEpD]n#1_#/4YZ!I+PJ]<&d[L=1oOOP<&T-jU:_>VJGb-LB)pPp0V8;&D08j<qHt?7/j#
%F?M,?Uk%A.H?4V7XL+1ckCdPf`A$P\NM2;t%R4?NqWrk[R$-)-K4lCS,D#E0q;@$N4Fle6;3@op.7+hE)mj%_^eq31J4t[5#PpZJ
%XhBM$gh2*O_Dqm3IGGePK5`sr;?9#:dnnB0_`ETe!`p:6#Xj&lWPCAFbbe9'K5N+')]us?0^]c&H(9`0'm;b*&XLKO9#JI5A^:Yf
%ngQhH4ga7R.J0.OrZN+p[>c%nJGBsB#G+\=,=RW'?33g[_3.!@&tWr:+`?4Z.uuVO$j?Qs,`o(ORn'A`MW]ZgC<ruQ^f8tsYJ%to
%4CNm'1"aLFRSFhbN$&X)Z/J%e#-2i\(J"Z"PSY/IbY`29!?AV0(+5!T>js\;/_L0r*VQK5(78dbT`BfPpX'tl,e#\P3j+MkEIl@u
%D]n]39?bCoYSSA5Y,`kh[`Nf:0dRrbCUB]JF9ZPP@6H"u1(g4T$%`FL?u?c=U?.j.3.]$kE8YThg@DY\%bhi;%psr0l1<L"Coo6>
%%$#afq4+9OQn+-9%>7ru*dD4R%+sMQW'22r]o>O1QpMK,V';1&3W\=MD*B5]?>[mH$h:H)(s]a<Hj_(tGU'?qq(<Qr9Ijj\K%A)r
%R_aV^VeruJK`Y]"OG&W:3n)_mTI5Cb6J3\].U5X3SOBAEJp\*LBEjhC_I/jYHH1Tq'1Q'_7^S+T"`HqnV?OHV=P-1A%Ou3'kbLPK
%feQ/:1DUFS.S#C16P3i6QEd\)q5L;H9N,np?$9miT=>l?Ogjf.mRFEW^>Y5B0!Rgjb83WNj2jF#5U"buAtes&iT>\F;PNZB&<&hi
%DEH3!Bi1`7/:kk01r)6'(H<e0WM?in<%(.tk(I,4QoS"J"C\`>"PA@B,<nU\Hsh,fbOGjiKjoc#kuC0>FEs]G%ja:[Qm_Pjp/">e
%)i,_Ab\,_fF@HHgL_r5`o?ek[Q02<RCi0RHHn.8"FnOr68dBXB;OW"]0KDbgagN2r0#T&`8hI8KZ]dP5>^st2nEP:d#4WH(Oj_Y2
%QDu=&a8lbpY`2HGP63AC%TU_AE^N9ke3T?-ir]+@q2)AOlYqdaIZ:76$=,EWV<+qi!gnaiQ6m..i)rNRJcT>0iX)C':54O']+N\=
%[F0[*-s`/M,@0/&!4.q:l-'cRk(UhNl$O.pIDIhg6g%"7Y7FBmT"]np;?R=`kA75RY\Bu%)UQk`C.IcaBM&7?R\^$*PTg6PEMS=;
%(Ck30F,eNKLKX!-<(n2J<utt*5qdR?0MHZb]G3S!XW2;0"IelEmV4*/fq@Go7067>d`n*9'3fG@K4lpd_6/Ct_i=#q@nr-19L5\0
%TA3PL&;c>,'?E'Y$$:q;*F=)QhV/AnTRtM#-#6mqgO5_4Hi_Mi!"@X`C#U;jZ]2]hd$TDP$gZdiXmD^HU:dqs"IVed2*c%HUmQR(
%-6Q!.OV\9uSkh%rJ5%TUfW;lnf-%;7%1YLU7tQ0KCW.\F"<a(t+k3*^no\^uON(9*k=a3G&$.0G1:hZp8Sd]&0a4DM4[Fp?aakGo
%F=AU"@<d<BUZ>T-!b">[8NmB--UnbpS``8:j!tef"@?UMfd9B#4`/g63X.?ZSqY5OJSg8e*&\EHbd\W\@_Ct>#UL.*";hfWYQb,/
%\0r"WHL(Y5'P%BrTG#F,U;e#c:fW%mZU(5*ju`tlc*1!$W7%Fd/=9%27s8"6An/+^"(YbR4CO_L0Vuc$LkcYT:5s:(#fFP/KL+g5
%.u3XkDHpb1f7_Z$@Xuu=*9\lEZ2qJJ2Q#WA\`-cn%uV*SXWp@E$Pen<(`n83@"0b7?6M$DL%Fgh'1%T]Q>rk%;F!j;92E'"AE$LL
%KI80>m8;<(Wa5luV=LfG\nHY;Y_?46$]bc:I'D`_3nVJPQB/FeQk=s^oa-A@2EX;=W1Z6S_7k,!hjd[r5pt3GcA.p?P"O0r\2Cjg
%\02#&-ck0m(#X-m%RpWg*p$V*"pG*3Jm"=r,fT*=0s1!p"p&dq.4JuRT5=4S-2WB+*V'P+H5%V1R"<s0dmjo0)"HUUcjkW6Y\o7X
%"f!KEFA(%2/Rr79'5O%Eh/"_56^Vn9q3*#ID,AX!7t8=`aNR6e1WihKUp,l6,"J/uKkDFU)WQ,bSC5nd63Jos97h]*f>k3;dXrO(
%OV-3Z3O1nhp58JYKYs%1%/;q%q("/C*6*&JmY;24#/:)TF'0NG43M>!p7ha,1C2_jK.4k$;^l'-opBs1o\gZ/CIoS.U2/)M4M,-^
%5rRJqBHBqQ8.hWUo)i?ek!%u#n5pC&5U3h0lG<^HCoWmGB?W%IS04Bh`k3S?.#+a$=6a5`i%cdRX(*ss^5]89?4f[Z?-<:6HP?Zm
%CW\W#s6'YjE$VT^n5'F;4G\^jM:O/bECXu:$8X/`EZ.,71)aWJ-Wjb</@,ru\h^7.fYY95Hp1Y#Qm6F%@60k"E6puDUV.DH?GVIj
%N^?Q!,\H$ac0nJfcPp)/'uhBJ[6+SZetAj@A4d!d),ZHGS0@J<Shhg;o.8+r'1Wb%km:C"0'E'Bc^0%W5j!akH4';E'G_M=.2HtE
%ai=65)CSF)FLlCANV6nIDNc\E,7KMYbmr>=$I\Q%TH(/rS29WGJF`D?P]Gp?,T2^0j`(;<X!.*C4?Qce$;j!(QTeCn)UiGBDFpSs
%K5M/7%16N/<9Al;!biq8k`AnIA/tgm@0i@o1pU\^Jk*bT-sKLPP8k%ud20AP>FJGLM'ZLMQY+E+EIY2>T_-@e8QGkZVU\\7BXK+X
%#"h#UFL3@c3T#AQj.l:AefI8$&E0:?b!SP?Dc98%d<oYukV,e@VN_S^LIb)"b&T,a6nZOTW5o+KD5<kM:kFj)[B>Zt*>Ej>P\i#[
%EAX8Al#Ql2()s$#!H;=Fp/.._Ql]MeXpBp4.Io:B,PlCnc4XW&:kagAbUb!W"Gs"jMe).dIZbn^>le#(-GX`mNr^h6a[g7[_$f<J
%)mD^[$.C/^2GBgUlt7]X9Yem9g7UoCYbSS_&m^ZWG%>?0"04g)68F7`UsjEGKQaJO4L@,]\RR'[64HRbY:H:uNFk?9B6<BZ;G,:e
%J5>7(;=WRCUREeKYaAK@W9.j#8'UtmfWgYdB5%p@,b"]bP&7:BJtc@>P$l1*9VQfiompO7c;S[aQ]r+.a`Fj]NDKc_3Wi[-YQURr
%@*R,1Q\P1Td1]E@S7mkMTJPm(,41Y&<QQQOMM/%t!*BC7`['.-YSfm#l8j=<#e&/=0T5KkQorm`(bMp(-HTa&J^h@?fB%(n+Q.tD
%("]0Y@CMCd>6em,k#B:$;(X=0ngVc@EI!oSa$[EHEW^Ju0^YpE![(HVDq;mT/k>r%_pe7VCa#IVV,YIXO]\DKbpArkC+.WLd(Tcj
%K5"gR?.)<!@sV,&`79+Ljr0#4Y$8[Sq4@*J1r23BW%q(>7RMCAGKdV)%+r[r">%Om^`SBQN3W"/S>2mSCE)k<eHe4fW)R:Z"00P/
%8=<th,pkC&EEqreL$)K_jmY*.ZKIu:q'Uf.S^E^&-m+#B\Y0(`1@\[E5[g^h'I;iL&aW`1iA"$]VRo#%<raEJ(()_]FhE35VJccH
%'CNecbboks;oKX$@r$S6_$^[](DYh[5ZiPZ>%WNp'Rl2]@,kr=DF]`h=+j^ij_ukF?[DuZ'+eg0/Pb.n$DMB\*Pq(](W=4s!8O</
%Xo0&0KUC0WF,nG*::urZJVCBRO2tb#Thh1uj]q%crIDp#Y)s^(4E`D9i7j\h'$iE(BZ)^p3\jhFF80Cb"[&pW'\CMVc8-]h`ABCm
%!!t:#UV1*Ta*/@d)_eT(B&Q6abGMZH&>?'k<HMneZjYu(+c`_"j1o#Qqs7Kc4b3io%Qh@+?&q1HKse%kENGC%%H)I[/uV6p1SB%U
%4KbGfYS^/VBq!tTA8Ec5cLt[Q"_(N+L[e2U^jYg.*_"]\@hurk>b8Dq<7#pS7'b>#W<bOB<`Im-1!`,jk'1s-oa6j6dE$4p`*JGU
%.A/J::2X/d]*[,dT,Y4N)uhtXTePK6FR^Rk5=e]C$Ia50Qf*E:j'tB8_C@Ek$Naa]?DK9-l2%9fLH[XJVo$:mRu=_[^_<I#S0Ek/
%6tNU$pCrAT6=6M*g1A"gV-LZ2jI(m!#P6p^h2+C(/&_';k\btY^.*mY'6#CYU'h_4p*1=gK3D,s!#Oi,#^!s\_W9s!QaoNH$P)eC
%Src!Di)CgZ?*"`?<kB:4iC"F;3T8<kY=W3#Mjd;OR`70eGgltE6(osqnI6u[07d[q$62>;=3Umta5cXh_)`LQ)bC(_-U;f.UX%Y6
%=ORdj*,dI@f4FKk!jHN"\VCY0UPaj-bdCl5]&\_lU`U:%F;kA1[4R=a2+'XsK=J'k@^ZVPNm\`<d$+OrZ0L*OFNH0#%\K$iHfF<D
%PQl\?_=5T4^km-6(3VFq8QTB3N"6*9ES0Ve+goSJ?_eBX&GEtt8<b#/$RN$.`sNFC=1ZHkMjC3h;Bn.R_srE)<O>m$JlN^;OhNCK
%9t'AtH>(9?6X3IV"r7]/BitqtW>l1I?W_=1"NdpLDd4aBW=9&9Y.f"SGbZZL%^g\:8feB.%bKe]/m-p@Ygl.G/bEm*0Gkp#KPD8D
%oCl@79?k!a*q.8:qAMdkM@@L&43ZnS3.b/=>_J$Pi?A\gb]lGYL<]66L!+G!R(hn+X^N.t4HAPELpfdnh;G6o?#rq=TqOhVZn/p"
%a]3_mdfV]>j"&]<C?rAaWb?h4N+tL`!>24$*Fa_XB`_^\1``Z2f9`]QCbE,(9d:c'Z]r1=9Q_AS-W&5SW>d@Co@XIL$U.Y>j4.Fs
%6%tZOXJj:o_^l*lD=KJW>Zs5mUF!fWOM8,8F&lUUQB"THW14`$Q\S/UebK9taM,4JV=Z@W,T&0I_BbC=>\F8\>,"V&&4<Zcef[jT
%TM&P(='uR_MYF[<hXhRNbcoSRL11?/(F7BI?9Z1n?#j0P_q'Y^`i'4?9UA+[f"2Ae0J.#,.=j"pX-!C7'#\l,.Xp.&X't%f03U.#
%q0h3J@:Tdc'.K&5`DU:(/l@ZaaG`iq'4<rX-Bf>ABOU8dV8h(/C)kPT6;3IXollO7ZQP*BD*G1<%"JMm[Y!j*ph8eNPJeATS1$F9
%8XMDs5*rq#W-CoV%!7njl-V"4S/R?p-:!Q\kRuFI+/DDf?o30dd0+2P:nl-k[-L`.>%AL=GF/R"j9/FaSEj,keT-oW.Xd08cR@1-
%?^ri)P'sER(2b$*rEqkG@g(4I;qi-[G:CltLqC!m'$s40CgbaRSn*MC,gg^ZO_j&1@)QoYG&nl;f%V8G<C(`I*H_IlY\YZf,(!+G
%KqEl.@feQm7Z/NW8MuY6lV4#<cmX\1cj;juS7I;A,gg]oKP\=EJkE0Me49Y@pH11aOt"pHQcSju[=f<hgYp;_e#4m32%i&!5`)V5
%!pa-alqo9gjOg^Q8^>a,-3uHa?)6.E8#"I7LSV_3_kX.2gg$$g`IQDO?BEScRNdZJ3teJob<4Eg!Z(7a"?>-)M(U$lO;L-[6P:&,
%TLK&1]"CSG?58A<?M!<1efdV`g%"i>$96/I,::Ap,eNp8?`ZVVC8')@`o/UkTZ\/fn)P0^n+gLT7Q2Rt:T0E:4CckDPu3ka.0!<C
%7YURf!o$s&'Yjt%bX.buBSSo$%)(!mQgAEX\n_N8<^b6"`)B[=7o;2#IH"!JQTl_=iM]U_2'VsSNV28@K=Y.],^;b>,;b8V)EMT:
%;$,M4f`^Y*.Y2M<\E7c3@<3.p#CZF]*F8[X'ZgYO(t[ZNE,7Y#(4>'\MrcKQF1`Tp+8WdQ4r[uapd$CaTOKfEd5qO0AdfD*CX7VC
%Tio(&_^/t=QP1EuoWWt-lm<QNN?LH9Y60$'kC(c@[ij=YUbX"*o]^D40#bdjEkp2"YCd6W@d7&;_dU2IK5n/<H-]EJMuNSbQKoP<
%nZ%n(f)oBiE,F1C5)-uq,%>"IU$feLK*%7'E:@HAl8.B&7N/5"Pa!="bkK.S)?_Bhkg:#MPD+!77]3WbKb4R5iDlS%S;U-^Yq1:!
%!(W2aTihFOC/k&3$AI)CR%Y!i=Ram=\<kSu@4_YL#Y"'<,7=C,%[N-dS8Y4D2"^)n&mq"lo8CUQcjsgJJLJs!6V>t3]s#Z\SSm3E
%Ej(6!/dd/K[Er.QmL-Mt?$!.#nl4*WFK;1'h8,O6S.ClA0ScSl&#V$cBlZ>QisVkXL9E1]^jIAI#\XcsBMPLnruB&NatH;*dF08c
%WJan2/0JVn`"uMR@5ph=-:t\;br&3FR)=<1VlQW@V[U(G?/`>mcr[XIbo;AG`hbLnSidfF5If?sB?EASj$X!YI&0NI-_69m+6Wl*
%rMma,#O2NJ0kK)\h?_QAdr?@+#]F3bM&]jV1:>"0()JC#D:dAI0i>!8,*[T8o6@;.`;0b`R<cBR&IV*BE0krh-Jde3+_jb&a'agt
%ftl)/HVCrj&Efe.H"#O:#9M5D"]MC8fesitTIj2fZmNdjqYIW<<B/^"[DE``U.Rsjq8O]l^,1Pi(1@P2<\j?1(3pTrB]]M=SZSe)
%"($r9[BA50OI#J1KfV=UZ<U!X7JHdt2Mo#Ucc$W@^C`h>H4ti'/(3nF)d`/gQc4/oE1)*VZ>q@7/IbfjV?*5hV6<Bu&IVL\Bh!L]
%P28L_PTeU.GTL3g`"P-C:h#.8Z!6:YLdL8d#1m.%"DR"U)8+R5@GV5LJn;]JhuZA!+i7b#?JXSF!dr3Y0aqT_@1mDdgHUb!HMPi&
%ehj'gHDpZ4"ZiZP!Qg$mHun*Pmh,+r8k_ikqhN^Z2BJD<4IHa+;coj[iM?O.#>a\.6niBDj(2LVM!?t2W_r<V$c;Pd7=pr3$I@S=
%Ae2`AVW8F,[!90F'Q4+`QTggEPr$CGHLc<1O"^OFpo4j,+p9?e$YBM#LrV2t3@hn.@\)dNYeJ$r?t.7p1ls@R"-_pp+O&8826bpn
%i-Ib\Vc9+%JlB=>mZ@VV25"2-'c5WPkcU\M"$"XbVFZI/19/(f'$pq(:*(q3alC<C<85j[XDaToZG]Kgcm_:6@Dln[4J,QJibVQc
%C.UqY(GS(PMdEZA(%\(>?"XUgCE%26@8bADoQ&k=URjPJTIC>i2th4BTHNLb49>:,i.E-\oU%D0gKH1=3LIO#KaWr'SW]cGecio5
%;F`a[\6h_$l5\%:ZJpBtl=+m?,7VY^h0;@Zi<cH$R@ELC4p%E+5O$98bbQ7AR7<J:XreJ%7pRHLAorH#&V8?576?[rP+GsTZ\E^H
%"!]T9:GbC4dV6946G(@Y`#Z`NqtNQG@fVIQS&e$G)TB&,9b+b\O1>cs.ZoDK<=/;WaVYb"^U-G0b9TcBY4F@[)!d^6$V5ArcW'Zh
%4h?AJfWg5ZC/C)sR4a9ADN51QEd6<Gn1f^U840fWTmc[3CE=pDCeBHX;ur*]l!0r)"=fCf8%M!t_\f1>VT'4t+b.te-2YUC^9GC,
%0sUgWj*6RrAkYhHiC03q"9]RVPit$R?mFd'(=<&Ih@8[#8:;46Z#S-qE.scJ`OOgbMeg_SM*]7#PCRB[:\JG06?;;.Y"?no6;8),
%\f=&HaZdW`-[&2kX@4+->G1;7jAnNa_tLdn:,3[e`tiAgXM@Zs*b/"t[7R<_mo4d_+/FXO[nLP&&ScodW6:*PS"-%icfV%t9F@k4
%S>-PlL5=[nj:r#;E7a%4U=9ti@oP!_[g0K<^gcP&JrQ9J]/87c3I5/t,UXM*`WX7d?DRPOj^b;@-c`rEJ7cL2:g6.>6?fBu7#OuE
%HlpG'r!MRYKPd.O%W"e1E9"8JSo*n$\p/.^;CJ-NH6.$o5mbRoP)GA?"M-8tdjd7WeYDB;"m*qt8<4d$4I4!U,?!PC^VCE-A$jCS
%-A8.b,:k::ap))qm76,VF-J5\UJ$>d_8ap;'cnf-/AZS-Ko`3P8A5OikF!0!+cP8?A_3@,g7m_s6]%B9n1_FOFGIXhGNf3'Cf7^u
%dJ$2rmR!.=OZN,3Gk/sG9^0*_Iu5&90TK0"PYumB4&KR@nqFV<kMphBL:8qb(CUCnVDmEmehn8?V9jL56+Jal2\_K@B"lVNiWp-%
%4=jkZ+u1LAU[PoJ;X!6;3jC=-@\muqLls"(M#`h]63W^8ShK[l%*Qb7^)p!FA9<$#;HcK87;bJV:c</'U!+NZf@F[E`"(#&\LJtC
%_SfaIR"kgK>_4.k>6si)Jo?gLp^2top'$sbGeogiXnMCH5^]CqkOeq*T,Zf=I@#Q.#4th1+A8#qF3]>cQ[t0p-)[,PGnInuTq^NL
%WA!@AA;<g93l<i6)*KV=dqUjG)R*u5ZQ)m^iUC\<MWD!t!cp-n&HJnS_]frYRafY@iB&!'X-QrLq1HDsLDL.XSIolnF!oY8J6ClL
%AI7nSoB2>J-*E3C^an]Y6d9'$Uh2<X%u6"c01Z@/FE<JcOKj?s("Kcq0`U:^#ps9>\GRFi1X_tE-Wd'OSYkj12<Z&IfP5;_=R9:%
%7)_TMGl%d,F%ccA\g/%!"9P-1`KG1gpBSl-"RSgR_\9b;M^h$P9,WmC[';;U8(j&CcC'i->OfO>?s0A$=lPmElL=TU.72MPiLuk5
%phm\(gIdY$Oi((I0T1t(1!ApPX%86e#6=Uo!N\JNaEr%&'lP1I$*:\S,AKE#`R`2[Yo7nB\jRI5*n;UgZ+)'o34=b.$]<f,;UOD'
%CD=up8Ntq&dUs7LKE[mNP3em:Zg%%?d7(W$7TZW?\dh3e5/AW7'J;Ho`qTj-^:''En:Ik]^Qe!uHn?=unMi)W>WS`c>V:&j951OE
%&*]3hM:_SUF6CBJ<FDh+4NRbr<"t=c/ma(Ujd(/1M$V'E(Y^l('Bo>jfW2`pM=_$dW$ne1g[R]6bh_9,;HmK\T]k&b-VsiYgl&6%
%TSgblT>3?YP'H0:TmKI1dCBTHSK5aC+*3:TOr!r&G+^K7:s$:ChMr==f@k%HJVf4l:3Y+1DblJ;FonKa=[43^Dd<Q&Wke@^D022b
%0c,ZZ?::\i+>XKJp^)OlSH1='I]<]Qk70^L:@Eqt=qci:&B@4`n/a2&);+*"N3>2Y9BgPITU,%)!`S=dJ2;%A0(77m>SJ%8c\(KP
%Fa5dC91L'O$FF8>JME]R+GW(-2_2[fT`h"OBkA9Np?*HED)=`$)g6eC&*;iF2jHp[qKA0c<sEqAYs?VL*`E*H6iOPF=oDdR19*:O
%PFeopa6QXO2_Mf%9*-/gc8Gh/T'_pY@;5Ohc8#LI,pUWSq$dtl1!6cF[8S1)9-BAss'%RSQVFc]MXL`KLYBtX0lPoe?"l<Nd%Cd@
%dZi!9@*_A>UWe4+rm$AA-_ICT"_T_^&T9l/EBiJQS9#m?8SG#pZpAKPUYGkG?=On8>$GE@_"SQS?-=ms]GpnSM0A<3oqOt:E!ps>
%_`SM1"992o6,HicJ/h!F>$P*)l]/b(lXTE"W-\Li9l0+1g7RMn2olL1qLugH1Nk\ss0_Y*<nO5&j96E8,je=,]1,*!j:OCBBR'DC
%KcpArfNlj6-QGCFf?dsYBcDE5Ju3_i0K7R.,'%`.[<FE^X!2TOeO1pLh#uhcn=SD#EUjF.%;UNPr5V>QHo?T2KSq_*]q*,Ooeq#H
%(g.8^alW_R%sZAZ3B\Z*JQStj'UT,06^&F!:GTn3kQ+55ip=tV9!^IqIW1iYEuYu/[fR1$O)6.pN'ep\lb8m@KU,;hP\oVJ"+JYe
%>o_H9LQ`!.>N,+fo9\8g`):AE<[GS:Jh]D+!n)rTqKZj,fe_[DZ'FmUP$FL5WfoZZQ/q1Gd[@aZ[;L)O3l?oin9SX=#H\him^bEO
%SLk4LU9^!<d)n@(Rku]bb%o9<:rYD:&pcI^d4L",N]pa1H81a)Y6e$g_6&?4g_*F/;]T__S-0j@KUM5A8h`@f-jA26`V`dPS\9_@
%?U<tB^RD,UgtZQSI*H?7&aUSl<Ni/[d]tCCR4rgp*+r/2(0d\Q25i-j33(9APp!(<Vmg?*HH7sW9Q>q2C0$ePbaO(b?>\jtF3Y%Y
%TiJ[e/2@_25FcA4Xrcs9s6&l#6SHr!W[#<(,gAg/6^gPYZ#kP^@&dP>j`'H);/b)`oP;+6;=@6bgH`42(cS4gJ:SrjDOh;D(Y(ZN
%5K[a.mS$p/$_>si&u'/FKLS]EQ,JJiC*"TarUQM:;@G_@h5G4B6tf2G*bh\@=IGkm>k)(4,[nb<=iO0*Y5F^,oJl;WM\3k=Xde7M
%@R8/]N8kt_KuQMHcY!J7eU\BuI,W;S[EqBR,H98/X@aGj7<9Y'1V7+g&W%gIem^A!E8IRbD-Kq5/#:a/GUi)ep\)nJ-#o#nj_S4a
%I6dNQ(F4AYOTC&]-t0?)GEo(>\[S)O3+fb>pL#jHr(-m7P9%$s77%JCV3dHood4s@5B=aE@L9,;m;UYRh2,6FNcYEQOaa9&T$,gT
%H%)<%[XNXp,MQLf2hRT4/Gdk*fT'M93HFPKlc^mZC>'>+@M><s(EXqM.W*Z$\`EPA6];66,3>"m'J9t&`$?";)hV\+cCMCpF,B9H
%m[kS6X:^fnhOVO8?'.Xm<_[Ir9V]T8m.QV"Vd+?=;3t(c@UVL4]_?2EaiOYW**<">&+onCB;*juKE_VgB;-jsjos"?3#(N,"m69U
%6eEa/UtrI4`j5:Q8%Q@?c;]4?h=53;LW;.I2A;D;o^fS(PIc$fH[=Bi2AbiX](5AOH,gH04RtDo,oR^LJ[?1tWi)7i,:?1qG;5gO
%>&2)BCs:Cug\/U:kn9TEIAt_h]H>t=I+mTEECR^f-+q"U/PG(n*`!=$(Se\4(VMJMHr/\jK5ZfO!@HueCgr\T>5-KIk%=-sJeWWM
%+"YA7l>M*A[RehP8':LR.G=@ieL_lOGe/A'0V9g$nTIFTme)"tV(L]2pNtb`5/&E5q!FD\n,Qj^H(pAQo4F#fY"EBpI84bD.^9FF
%VN:5[Xt9:VPRZ:2iI/nIm59LQbV@bB\'.G6I/7@L4C@`po_Cdub7D>cb=u7-.D55?5B#[$lutV!a.si_[_j87bT@R!F.J<2V/-Cs
%X'7c(Y7^\ENkt^<bEru^:OgW][hl_2I=0CibAY/obDeAs6.UJ.T/Ug"Fs$PI6KP"fp?H/e#\*2dDN@H0[2n_FI+Vb8ps&0QrcZ>L
%'Q4M3c(DK>]J"\\:YtWr0E6)>[Y2@(*tT$,Er33n!hbkCQA?:ha6&+Fk`c2..HG"Z8k44sJl''_Tf>>aVH5!!>L,q]!Bo$q)l_cF
%UNE=^WE;o&GO<[U)YhXBHWBhLQ":Jj6%6X34W0,m.rSj&S@DhooLK^ob<t-DaK=+l,lQi7UB%L&qTmVJ+Dk=3luXe0g4Z4?@8l!L
%Gl$Wq,fBZo%T'-qi>+o\R"GR1N4qV/WnjMIN9X[dm^X<ddQPZENVn(^=8c,+7kYt\nT<,;j.(N/R(.lL;^s#]8ZDt:om,n$!57Dq
%Q/Wt9BhlbnUlY]KD^+taN!r%0_5[q!dI%he`9-PYp:Q*fQ;2W=jd_a_GtP%ceYbjX%j*lb+TgZC>pV8g93Z,>X;3QuEcB<[eq8q:
%1Uj:oKgofm+mIN&+q\=I27tns=SeG&d\D,`^tPrp,uq)s'(^._`u)5iKI1g)cA9N\q-LVKdm5.H]3J;J`26OEX,DW:friC[8.3t;
%Z_ZDIc5GYdTQ3H]P!eY/:p*@`UVp\+'>I#Y:<,]@1m_BIp*3'pKeh@]Z#Sp)kttrQLX4GCgW9_mAd9;!5t,/M_&j)R5<Uf&.+r(]
%T'[4\Q(P9=KAKqc,'qur\*<1XU@O[17B%:sLDF@^;&cKr`k5&/Ksf1J)1lB!C+dHNp.deOVFWG&fl(oeH,QQH8=MFW$>nU[RqpIn
%f]#K7hcuW\+BVFK[]7K7ER$/9k-nOLEZEZ@.*BV!OZu6dYKn`[+fr'tjq_Vs^:eC$gSNfc=\r(rkX`#C#%(Nket+a5Pq"@_coBlp
%P#'-h5)&grog([?f;0c(S\4/DQOD"9HkBPk'2/Qj7Be?RX\,3>%D+g,]65c;\np7LUE-#_U,?d83UT-R\tGrU97Ilch[C?_6E3>1
%STHq*UOSFa599'tZUj.f-=9JNG?Zj%lY3ru8\W@:e(\%+r<0TaPRo"KU,imYbj-1jpj\5cBIa,k?$dj*g7le9WV:Q.,3aps2ai&/
%kuGsJMp$rT=@$8shfT\>-lcQ+=`@#XoWD@WQ<UMJTg&AH8<W0m?=tK\ona5R<$Om#e9RaaMCD,Slg1cBQ@`>$-HQ+<9(n]4gMf,6
%%O=&g't3q<A@0\0R\4uuF^HoX2+N$'m0g?0l[!n!>jDJYMbshJ]H-ZVfHjVC<IJ54a-IREj@ZS9-?eH('"nK$iR8#V,EDU+\2o2m
%7DA/0M$bP-9$m8DEP5Vi+uqp;jO$rD(FjqYbX:Y.MY.[Xi-&(W)_/dQFZk&Qp2sB=%-i4#Rg!8;X.aT5:=[Odnad2rr:7L!IufA/
%=::r\/mL\:eY\<p^:Ndu9G\"g1BCl#>E-dE9pMQYGHWJDn0r$-]>q)]A?BAi'pPVAGhGqRONcq]R0Cr+P\&Hqk[1Y$*`;fpj^m"V
%UF8WnkLXB+L]A[]/WO\/X:us":!TFBd^92oN_X3udZA_0glc'4V+&>Nl*$^`V*^G`=nIVc!Z"7-:)SN1kM]m&!LI_!LO<QI(U2nD
%f%1C*>`E4T#FU.tf@D!4/Bpma!Y^@d-X1#R`=bGY\,]qEJI5fh)$WaAqF[pbV_q8n;IT+V"Aa'J7Hp#)SFZn0]o^r(#Oh`fA2[W-
%;fa-O.ks5)RC<BUAfp!W!\(ti5KjM+P39C<%opMbR2CZg+TYVQRM,XtI@9aD5nh_aM,:m_V9#n/o3.gZPm32(dW+*TGd5rrZX`p^
%CfX#(d#_8.J>MRUh;!lGcNfFNPBp-M.I!9A0GD.9l`[8$Y2/etHg8P.jGY0SAUV*f#Fo;Mmd)Ll[+:B3m\X9418iAX6cB@[);1;^
%O@=jWgAUX'/f]5L4lI$<gE@I"bi5r!0btV;TDe2O/M$W4P)S]#A#1B%nd.bUE';n>HT==Vrhq8MZcTTjAOBO>@LmD`77i.QVS+Md
%_h2RN0rCI!-[Y]<"Q@YM;SM=`Ap8a7e6ItL4\ua)qLdRudDO[P83TmjU\achaas+Z3/p'YC-\]E*i(T!H4#TqjNc&_2K5@5!rrV-
%F(k_O7cG\hT%gO^9^o^Wc402^3b>=OG7$MFo#QV?T-KUL-7g>)0rHs,(_p"Y)'L?6d=pKJfHXW^A:f[6Y:M/50*_1U@H_f:qdI:f
%d-'1b-pc"fY&o?9rV3%Fh>$T_RR\?"kM_T=Gk>Uf#^gjh-nLJ@3"qUg[V[%.UI-I^mkoQo>Y%IHa[m`9ATet&?SM%].^pK#?1tU2
%Aqk*DO<l];-?AU8b:-;9]]V'AZ2JVg#!og=DVQp>#PU7D?qTVVH9[EXr>(PoR5"Yam[L!.WRHRXZ*u/ae^o_.cq_,#r;Ruo"jG2r
%062(]0ORLbf?ChNZAi'<lsVF9C&?n^QZ*-_ir]tu(h7BR_k*-0XsM'$/Y>BpkBuE[#IBmE"Li3H[Y<be;?lX5a$&R5NMoKI's3l"
%e5p-7;5gMX@^87?kl_f+.+l0FWGG"ni<#?cmDAXQ2/ZNp\Uj.<2-8ph`8RL&(E[YsMPH&GmoqD0R/2D6[ZSXQn025a1($"E7X)WW
%*ko"@Sl9(b>%J'CX&clV7`233Djgn?;FEH<$%^'Ib2Mpt%2hkdUKfM!>V`3cNJ5T#Mkq016lsWQY3Ts7^NmiMr8n0Yn+W4.8t3.=
%p[i4p0[K67ckk/:=`.`okZ4#1pj0A*#sb3Y`*]QZSff5!q!B;ue+*$f_C;s#bK9&Hfn\H#F.CWH\EA4.Y=!r?SCB3XcG/,(>a;fG
%CTT6NU7=)RRi)HWfX,)BS-EYh*gO+Y;#S=U`l[]YGr`PN=irO#BdNhkn"W80lm2M;5)Q">c,WcB9p^PU#5U:ll8$[C_n>L;Z2&KO
%IX[P."R.XHh%k'F)]`_c!nXQ:<27#^[N5OufN\<ep6jB;cQcerbAZX.>tom[PAmLuTMqA<9G6Rcll"U1X'iCQ!5Tp]h"#R6Jc!rC
%^V$=117)*DL:QbAjb`]?/)"'_he+%\Q'h9aTOdF$.&ZNY6s?S?BND!\Oasoo"rMVc$2m2daNs'YJ7DkTqK7!XK:`N!TsYj\8$S.%
%T^OiEe!=603r$43@MA]H69F(FIYTY_<4'"n^#&4HI3bOm_m<!)r-Dl7hWOhL5tiDThJ<*iQ(pXu*;-]A>g&",-.,Z/l]cmGY#Iki
%Bgo>j3DKiO?N2=n5$t_W[gT:)0%'*)^)dN@B&'k"kOfSZ)Y.i+NETcR(MYj8\a`nH*bFU4l"W>47-)tNC#f`$oVfW$o21nl=C,pV
%[k7SO*JRD&j(k-B6,'&qg=*$4o=_6#a6!n_n%+fMoWIptb.9+Bj-E>X?&!:VW#F*@<N<%:1nkRi-p[YG=h!6`?t+Ud,HPtJ3]99P
%?Z-%P,WG2@,Q`LGqoBKk1acD"0lim*Nl8i3DRlU6E!_lZ:q%7d(BKY$20\%i(o"hXEWlj<'YqkFe0qkE8r%X_<Zq.Gj"N4ldS2eE
%dU.\O?I)j;CEmm+goet.TG7Z>$it=(hkDcLNDHRU+"Q0&8SAkcifFhIkiq=ch1k:QZ;HlKh,:gZ;nFs5Xca1gk(!45#-E6e>_7++
%++31+Vs.`tZ0]0P6"o!n%c'.@F'&Z5"%&E5L^5d@pR;^s`132#ToQO7Fide>cs,H#)thr'j+P]#SqQM@oA3@?%7D[LA\((,5Y<h,
%?KAh+%D>FNC(<)H)E:]=bBM"^S.Qs\1PkR243tMcHj,djm;PsrX/L#+##;EI;@IX*l!s#`9N\o)&M#GYQG(682tqp>c]0D9gCOqS
%Jp6HJ77]\8?!Yn,VI&($7)?7#g-"'d$iZ+.pN6sYK_UGsBri)-?u:l'0n]MqQV6EX=0G:6b5>#^*6ES<47=g:1J,@DFkoGPe9An(
%64OrobKah889lb^M>CM_KTO`e<X3NeW%Qr)\W@O$\B9EBX06R1gG\LR0;18R<&sMq:"En-^QYr8eZ5t"2,j$dP3uf&AkR?%FC!T?
%4`#3$*=mlc*O/OPo5s))4e+c\^TD`<:rnN",u=rHHMlOfp8@(tfJu`/`"VKF/'eLf[2qK4$gK!.]JE7;C0[j_cGg@*#I+&;SNmXl
%)^Zo3nstGGbfq>k!2e(o"_jEq?O=W7cmQYlnC_i:Cp0rST*8>?0nl[ma>3DBhG`i2j>:1t_j2gn;1&7`AO'7`4jqJL,Pkr.)mpAG
%?)$grR[;13>M>MWLhl9R#`:&-Fglr"B?1`[KAXag3b*rE6/$E5bMT1<R7@-O7WsQ0&9#F*5=9]">/3"1<@+]s0G,UP4%IC+PZP5q
%I':nJWONXq\f-P6NH^OOO9=BV8d=)CG>@*lMd\Jk#OA1l-MZ/]Hf#)e,A'eX7M+%W[k3FEJ"*OkgLFFI[c"QHReFY;:C4>Q\*G/5
%N25H+JKN@>Bf^U:1`1ro\4_#FC/M4V7s+JZ[MKh\,MI%jic87Bmi3p[/,b)maG;RTi85=pQSm90cuue.KR%mmL'Fbr5S9<hhhi&j
%4/IVa:"ECF&H,l+W#=`]<Le_?Cbn2Q&)ECIG.\DahL%@s-b!r&&%R"Q]eT.&TE?AepVFe.pa_!'`:#'iJ"_'G_`:'"?*F7BO0CoO
%^tc!9;9dWND*(n.Z'hJcGN,RlfoJ17d3(>$ihe5W'[dt9ViIh0nZ1i3hN?7r*'Q8OMg5@F5riOo,W<a>Ffl9;&3$W4G",J2?l#uP
%ohM;;9m>dlCRfoTcYVJ(8("#iFBEo*Fe2-aMXS")D/4@JjTmnbRUn#Hr74o`rj@uW`dYP*0%[:fQ7%,[WYUd<&C-5B4Auo/Eh?8H
%AfXVUZ/HW[bID=E#1%p<Dq&mIggNl+"7.fP[KBm-SFSBs`i*QJIE!K,>`?m=Tra4=dWD'#dI"X&hn:,/Cc+R:h_%$$s*0u+#_2hS
%iS-2\)FTSFh>JtAK+u;/U7>P:7/du0_J1N2EKnoSB(VI/\@P05@<PdL>E$AuUV'kN$o-E8?=QnKk-28_FXYDk&ltB8M',RgmC_YU
%&u0&m<U/)mX,m1(4[Ro(>6S!4_GL$$RcHdhN"cDm4neT+XUn1N%;VH!s1Q[Wi"gC$$kWf,iZkgp61F*>Qdp*i/Dd0WT4@#j3iIX4
%L:5n(UIEGhO&hnFVnpZ6fUBm=`Vst'+]t4h@\5%#qOVFa'itZFRI)?gLX7.*W&Ca4p!e[mfcJ"^ZC%.:>*A"_IJmWYXu`R1SiOq:
%8tihlLW[oZ6Ra["7r2t1^/^+Me+Z\&<%d9@,o)mr_(]]gR*!Vqe,&K$Lnc@+9II*d9%6(Y%$\"Vm7bhScopg6KLO!;.q*GI"]'i5
%]L%^??if51Xt)$FAs9uXr&U+",[eEKK9f4j9NofB>3f><2)Ck!`d+Dg'IS4=aaL1"%:;f;,78l5;2_DBfaLf)<?kYG;(c.J/kDU7
%4aVo/"Ap1l;tZHU?Z87nG70D/+:aJ'O:D21:SiU\UA?q;[$$bVed_;u^4itp@cABMS]J<XdGsg\lMID/EL+l=_0P?_E&a]5>HYYd
%%b7kZHM]VN<Ps%I*,gK!PU;:2D))N3mYdn+;h^<\p?@e$#SA:qBb5I;0t(V"o[34@1)rWUf9W<PJ]s4>C-^24ViPHST-4k8c7Ibd
%Bp[s00C^362M)*97-Y<Y8T53b62mX7J0L-83"gBh9i;d`LmeCZX+`T*[<eAfqI`IUNiHK@!cfXY\u7Z8ma2Y4b,%JCQortm!MGYQ
%UTkfad+eW-a&jjl9P!*VE03JIBS_EQ[(k)NUjAAAX(Wdp+T"SOP+I6;)tEtt`%X+T[)5(7)?04uL\q;H78C@XE0n$GE53%%9,PP)
%m<nZ9DtT^f"fB#>VOe>32r3_\Y<"6jb1AK>]G;5[BFBFie#jD?5nGE2@`4BH?jd0cF2[5i7.3JURJ?QGThks[co>AAea^5"W[/k0
%atRKC\'Ru)eVbgE#GRrIYYuitU9ibN^.2IfBht/ZROc!WKIBi+pT2si[s\mcfUadu?uOAel&@@W]-d"`#t'B0"9iW-;r8PY:I!%G
%Ka<,ZU*#>ETBrXQlg[7=Dk*+2h:$mE6m7R+P9WI)Ym!]/-b()IKh0"!<+GjO@+\+H74HLqBA'YD-tf8j`X)c:Y[,1Lj?k00C'5:_
%)Jh87R!Z'rOhf8u!'HKgSKqOX$,9G>:g3C2<_:dKNf^CdKUukVOVg[n:XJ^P1%$hI4#0R.nW!Wa-heOZB'#^HdL#kr^\;oHTi%M6
%;HJt/38WpEA=q[m$;5bZ<<t].g,BB(=H6ji)t&JPBR=;SXc+LX#]#-<HF`[I_f<oL#hN(ObV\GD@f&VZ0'^7Bh*SgU1,^V5-E;[\
%IP>*fN$sSA9!sJR1;0#s3SYF/9l[qJpee[7:-VV5+B;=Zg42aQA*^BlI0/^';AI-9]uX?AKM<.eL(FT>pp5S2/W*t<-'"md,/NHl
%@(@$g1]pq'@G25F*AaWNI]c((5usU@=YUX^Q.?(r8@VRkMRZTElK,fdQbsoE"f(G_osnn)WRO3OPoKJM>[U'u+=VO?J,-UnEYQ-^
%I!mde7?ruTZe?PFH:jdqiokMX_372LED,Gn`r/t1==U6m(I&$>.?*)Vo#F<GWt%h=(g\q57O2t>f/U)F/*UHN<ij-"hCA"Kao?;"
%7LU3B^k1JEEuMHZT6rhfDK_*R5]JS9f=[A)$K6;Ic&4Hf=lQN9(g"DY*Y'>7Mc[1PXB;.*0N8%M33c%;-%)`akXjrkJ1PoX(lb^c
%iPKm^2c4r,&3]s-Zd5*E'(P"OIj%['9G5]tfY/27)KNl*?$]R*I+a)uoCd7fn=$g(81=T,<V+Y\dT2U!Ea)6%I-pRaB?bA],en;m
%GO='M7GpWX\><_/T#N&k"B;*42-/:;"fP&C$=.!/ML^b3/]XHSPNk0`FW7f_'F-)Fr#27NMQl1`_rtDK!H8$(p_lR'&8Vrgbc`Jp
%4U^^ilg#m9bFafMkNmbUhgp0*ac@_SYnKPnpi;!@A38+"]$qrapSS1H3Bmd3kW:8hXA3!im\HVe:Y$N]cIDCJbHCi5[tI$:8X5K]
%9?R/MW.@m(Tj&4>K_sVeQZC"53$3mYUe-d2b\DV$Ke0sSNEN!q9ne,oR+[>(Kt#/.QngYM9)M+]qIbhhc%Pn+Jq*T'3SEm(XrV#m
%Y+lni5CI*tE(L1sW'Q=N8ceL#@RP+l@>h7u7MX8$V8nK.H/J1;E[pbSn0oFVa[Q@sD^g_5j]F[<Si6QFoqJW_+!5U^o%S)Deq38$
%6=0&TS=_Tm:G_"4dl0Hh5--a_aU<cXkAA[pW@ILg^U0J0oleN6/Y4"<aP0s)^uOgJK]g*r\4p>cU%`?bKo`FJn+Z4)]1G!4O1N%D
%-VnOMWRZ`p4V,VBYOeeL10(IQrBcOPkBu.RBmOpLdi+eQ\6\h(j115unTqr,5!L7Zp;,A;c-Y(B?O_sl2*+UO6ZkNgRMBJJNt`[*
%>(7VE5'!7@gHA97IX,+l#G8JH5<g6:O,)oa`FY*KaEr@4Z![K(>Zs/-L1]F4?&P"SOhp<I;f[uTYQ0FLB#kargnNkt*O(CtlnR?_
%jHS^Y:*L0:dXjcs-%QWdl=dRS9Q\TWGE7pXBMF=36'co%Uol=9"\>SYcjso."7c!Y,*WEqF;g=n@Yk;>=FA-PTaaQB@`A6JTU9iP
%C/TbK1H""pm+#gor,>>in*)&\*RoKH:*i6-$4TYr32rBV+@9L=;-9:.pP_WO>J:8YX%q`gW&Ba/FNtBG7(.Bi3V+LKF.>JrP&i>=
%8YLScPt8kBLqc?SCann.-cO3BKd7oEf&>*)BXbG-K&QRRR#-%l%;!qXaiV^<%1WgjE[*P$.IBl.pl*3oEF1i1dF($KR3q0YhA+l`
%glk/hl'A&rV#u`o[bFpn8VJImNu$'o\/S)DDnZKr3#mki*BSoP,Fone<PII5lG_-63M*E9nAHI@W`i)HOW[&;[3CWN/W=b>ZLXR3
%]S#j1,A]76BFZOH&<9t/m)0SQ(Rni1R"hb_P!Tro9/gTVc0TM&F%F8D]CN1K8S+$h$0o#i\>-i,A@`Up-b*/fG2a1N]+jAV^[BTi
%,;@aLJ+^!pos[0co(Toto#ks$s19A%ro9ok`qD@ho=4;e^Ujo(qiC\_J,R!/qu2@8rqQ)/hd(tDrUUQ7q=.g@ro(?dn`.rFq%pgA
%_[le?j/3uJpUf>_o#!+Fro`sP:VZ`$a$9Lmqk&B9oS7qrrI8>98,!OCorDI"dm*cl?i1Gtjhu0~>
%AI9_PrivateDataEnd
